// storage gateway rpc request/response

syntax = "proto3";
import "common.proto";

option objc_class_prefix = "DRS"; 
package huawei.proto;

service Writer {
	// get the writeable journal files of specified volume
	rpc GetWriteableJournals(GetWriteableJournalsRequest) returns (GetWriteableJournalsResponse) {}
	// seal the journal when the file is full
	rpc SealJournals(SealJournalsRequest) returns(SealJournalsResponse) {}
	// get the writeable journals of multiple volumes
	rpc GetMultiWriteableJournals(GetMultiWriteableJournalsRequest) returns(GetMultiWriteableJournalsResponse) {}
	// seal journals of volumes
	rpc SealMultiJournals(SealMultiJournalsRequest) returns(SealMultiJournalsResponse) {}
}
  
// journal writer messages
message GetWriteableJournalsRequest {	
	// uuid indicator the helder of journal files
	string uuid = 1;
	// every volume has dedicated journal files,
	// and the volume id should be unique in the DR Server
	string vol_id = 2;
}
message GetWriteableJournalsResponse {
	RESULT result = 1 ;
	// count indicates how many journal files are returned
	int32 count = 2;
	repeated Journal journals = 3;
}

message SealJournalsRequest {
	string uuid = 1;
	string vol_id = 2;	
	int32 count = 3;
	// journals is fileName of the journals which will be sealed
	repeated string journals = 4;
}
message SealJournalsResponse {
	RESULT result = 1 ;
}

message GetMultiWriteableJournalsRequest {	
	// uuid indicator the helder of journal files
	string uuid = 1;
	int32 vol_count = 2;
	// every volume has dedicated journal files,
	// and the volume id should be unique in the DR Server
	repeated string vol_id = 3;
}
message GetMultiWriteableJournalsResponse {
	RESULT result = 1 ;
	// the map contains volume id and its journals
	map <string, JournalArray > map = 2;
}

message SealMultiJournalsRequest {
	string uuid = 1;
	string vol_id = 2;	
	map <string, JournalArray > map = 3;
}
message SealMultiJournalsResponse {
	RESULT result = 1 ;
}

