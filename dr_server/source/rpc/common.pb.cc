// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace huawei {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Journal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Journal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Journal_JOURNAL_STATUS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* JournalArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JournalArray_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RESULT_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CONSUMER_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  Journal_descriptor_ = file->message_type(0);
  static const int Journal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, fid_),
  };
  Journal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Journal_descriptor_,
      Journal::default_instance_,
      Journal_offsets_,
      -1,
      -1,
      -1,
      sizeof(Journal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, _is_default_instance_));
  Journal_JOURNAL_STATUS_descriptor_ = Journal_descriptor_->enum_type(0);
  JournalArray_descriptor_ = file->message_type(1);
  static const int JournalArray_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalArray, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalArray, journals_),
  };
  JournalArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JournalArray_descriptor_,
      JournalArray::default_instance_,
      JournalArray_offsets_,
      -1,
      -1,
      -1,
      sizeof(JournalArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalArray, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalArray, _is_default_instance_));
  RESULT_descriptor_ = file->enum_type(0);
  CONSUMER_TYPE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Journal_descriptor_, &Journal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JournalArray_descriptor_, &JournalArray::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete Journal::default_instance_;
  delete Journal_reflection_;
  delete JournalArray::default_instance_;
  delete JournalArray_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\014huawei.proto\"\254\001\n\007Journal"
    "\022\014\n\004name\030\001 \001(\t\0224\n\006status\030\002 \001(\0162$.huawei."
    "proto.Journal.JOURNAL_STATUS\022\014\n\004size\030\003 \001"
    "(\004\022\013\n\003pos\030\004 \001(\004\022\013\n\003fid\030\005 \001(\005\"5\n\016JOURNAL_"
    "STATUS\022\013\n\007CREATED\020\000\022\n\n\006OPENED\020\001\022\n\n\006SEALE"
    "D\020\002\"F\n\014JournalArray\022\r\n\005count\030\001 \001(\005\022\'\n\010jo"
    "urnals\030\002 \003(\0132\025.huawei.proto.Journal*$\n\006R"
    "ESULT\022\006\n\002OK\020\000\022\022\n\016INTERNAL_ERROR\020\001*-\n\rCON"
    "SUMER_TYPE\022\014\n\010REPLAYER\020\000\022\016\n\nREPLICATER\020\001"
    "B\006\242\002\003DRSb\006proto3", 376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  Journal::default_instance_ = new Journal();
  JournalArray::default_instance_ = new JournalArray();
  Journal::default_instance_->InitAsDefaultInstance();
  JournalArray::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* RESULT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESULT_descriptor_;
}
bool RESULT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CONSUMER_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CONSUMER_TYPE_descriptor_;
}
bool CONSUMER_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Journal_JOURNAL_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Journal_JOURNAL_STATUS_descriptor_;
}
bool Journal_JOURNAL_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Journal_JOURNAL_STATUS Journal::CREATED;
const Journal_JOURNAL_STATUS Journal::OPENED;
const Journal_JOURNAL_STATUS Journal::SEALED;
const Journal_JOURNAL_STATUS Journal::JOURNAL_STATUS_MIN;
const Journal_JOURNAL_STATUS Journal::JOURNAL_STATUS_MAX;
const int Journal::JOURNAL_STATUS_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Journal::kNameFieldNumber;
const int Journal::kStatusFieldNumber;
const int Journal::kSizeFieldNumber;
const int Journal::kPosFieldNumber;
const int Journal::kFidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Journal::Journal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.Journal)
}

void Journal::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Journal::Journal(const Journal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.Journal)
}

void Journal::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  pos_ = GOOGLE_ULONGLONG(0);
  fid_ = 0;
}

Journal::~Journal() {
  // @@protoc_insertion_point(destructor:huawei.proto.Journal)
  SharedDtor();
}

void Journal::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Journal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Journal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Journal_descriptor_;
}

const Journal& Journal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Journal* Journal::default_instance_ = NULL;

Journal* Journal::New(::google::protobuf::Arena* arena) const {
  Journal* n = new Journal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Journal::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.Journal)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Journal, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Journal*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(size_, pos_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Journal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.Journal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.Journal.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .huawei.proto.Journal.JOURNAL_STATUS status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::huawei::proto::Journal_JOURNAL_STATUS >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional uint64 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional uint64 pos = 4;
      case 4: {
        if (tag == 32) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fid;
        break;
      }

      // optional int32 fid = 5;
      case 5: {
        if (tag == 40) {
         parse_fid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.Journal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.Journal)
  return false;
#undef DO_
}

void Journal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.Journal)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.Journal.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .huawei.proto.Journal.JOURNAL_STATUS status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint64 size = 3;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // optional uint64 pos = 4;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->pos(), output);
  }

  // optional int32 fid = 5;
  if (this->fid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fid(), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.Journal)
}

::google::protobuf::uint8* Journal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.Journal)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.Journal.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .huawei.proto.Journal.JOURNAL_STATUS status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional uint64 size = 3;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  // optional uint64 pos = 4;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->pos(), target);
  }

  // optional int32 fid = 5;
  if (this->fid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.Journal)
  return target;
}

int Journal::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.Journal)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .huawei.proto.Journal.JOURNAL_STATUS status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // optional uint64 pos = 4;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pos());
  }

  // optional int32 fid = 5;
  if (this->fid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Journal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.Journal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Journal* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Journal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.Journal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.Journal)
    MergeFrom(*source);
  }
}

void Journal::MergeFrom(const Journal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.Journal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.fid() != 0) {
    set_fid(from.fid());
  }
}

void Journal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.Journal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Journal::CopyFrom(const Journal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.Journal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Journal::IsInitialized() const {

  return true;
}

void Journal::Swap(Journal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Journal::InternalSwap(Journal* other) {
  name_.Swap(&other->name_);
  std::swap(status_, other->status_);
  std::swap(size_, other->size_);
  std::swap(pos_, other->pos_);
  std::swap(fid_, other->fid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Journal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Journal_descriptor_;
  metadata.reflection = Journal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Journal

// optional string name = 1;
void Journal::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Journal::name() const {
  // @@protoc_insertion_point(field_get:huawei.proto.Journal.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Journal::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.Journal.name)
}
 void Journal::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.Journal.name)
}
 void Journal::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.Journal.name)
}
 ::std::string* Journal::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.Journal.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Journal::release_name() {
  // @@protoc_insertion_point(field_release:huawei.proto.Journal.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Journal::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.Journal.name)
}

// optional .huawei.proto.Journal.JOURNAL_STATUS status = 2;
void Journal::clear_status() {
  status_ = 0;
}
 ::huawei::proto::Journal_JOURNAL_STATUS Journal::status() const {
  // @@protoc_insertion_point(field_get:huawei.proto.Journal.status)
  return static_cast< ::huawei::proto::Journal_JOURNAL_STATUS >(status_);
}
 void Journal::set_status(::huawei::proto::Journal_JOURNAL_STATUS value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.Journal.status)
}

// optional uint64 size = 3;
void Journal::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Journal::size() const {
  // @@protoc_insertion_point(field_get:huawei.proto.Journal.size)
  return size_;
}
 void Journal::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.Journal.size)
}

// optional uint64 pos = 4;
void Journal::clear_pos() {
  pos_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Journal::pos() const {
  // @@protoc_insertion_point(field_get:huawei.proto.Journal.pos)
  return pos_;
}
 void Journal::set_pos(::google::protobuf::uint64 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.Journal.pos)
}

// optional int32 fid = 5;
void Journal::clear_fid() {
  fid_ = 0;
}
 ::google::protobuf::int32 Journal::fid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.Journal.fid)
  return fid_;
}
 void Journal::set_fid(::google::protobuf::int32 value) {
  
  fid_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.Journal.fid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JournalArray::kCountFieldNumber;
const int JournalArray::kJournalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JournalArray::JournalArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.JournalArray)
}

void JournalArray::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

JournalArray::JournalArray(const JournalArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.JournalArray)
}

void JournalArray::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  count_ = 0;
}

JournalArray::~JournalArray() {
  // @@protoc_insertion_point(destructor:huawei.proto.JournalArray)
  SharedDtor();
}

void JournalArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JournalArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JournalArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JournalArray_descriptor_;
}

const JournalArray& JournalArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

JournalArray* JournalArray::default_instance_ = NULL;

JournalArray* JournalArray::New(::google::protobuf::Arena* arena) const {
  JournalArray* n = new JournalArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JournalArray::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.JournalArray)
  count_ = 0;
  journals_.Clear();
}

bool JournalArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.JournalArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_journals;
        break;
      }

      // repeated .huawei.proto.Journal journals = 2;
      case 2: {
        if (tag == 18) {
         parse_journals:
          DO_(input->IncrementRecursionDepth());
         parse_loop_journals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_journals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_journals;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.JournalArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.JournalArray)
  return false;
#undef DO_
}

void JournalArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.JournalArray)
  // optional int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .huawei.proto.Journal journals = 2;
  for (unsigned int i = 0, n = this->journals_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->journals(i), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.JournalArray)
}

::google::protobuf::uint8* JournalArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.JournalArray)
  // optional int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .huawei.proto.Journal journals = 2;
  for (unsigned int i = 0, n = this->journals_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->journals(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.JournalArray)
  return target;
}

int JournalArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.JournalArray)
  int total_size = 0;

  // optional int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // repeated .huawei.proto.Journal journals = 2;
  total_size += 1 * this->journals_size();
  for (int i = 0; i < this->journals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->journals(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JournalArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.JournalArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JournalArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JournalArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.JournalArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.JournalArray)
    MergeFrom(*source);
  }
}

void JournalArray::MergeFrom(const JournalArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.JournalArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  journals_.MergeFrom(from.journals_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void JournalArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.JournalArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JournalArray::CopyFrom(const JournalArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.JournalArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalArray::IsInitialized() const {

  return true;
}

void JournalArray::Swap(JournalArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JournalArray::InternalSwap(JournalArray* other) {
  std::swap(count_, other->count_);
  journals_.UnsafeArenaSwap(&other->journals_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JournalArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JournalArray_descriptor_;
  metadata.reflection = JournalArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JournalArray

// optional int32 count = 1;
void JournalArray::clear_count() {
  count_ = 0;
}
 ::google::protobuf::int32 JournalArray::count() const {
  // @@protoc_insertion_point(field_get:huawei.proto.JournalArray.count)
  return count_;
}
 void JournalArray::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.JournalArray.count)
}

// repeated .huawei.proto.Journal journals = 2;
int JournalArray::journals_size() const {
  return journals_.size();
}
void JournalArray::clear_journals() {
  journals_.Clear();
}
const ::huawei::proto::Journal& JournalArray::journals(int index) const {
  // @@protoc_insertion_point(field_get:huawei.proto.JournalArray.journals)
  return journals_.Get(index);
}
::huawei::proto::Journal* JournalArray::mutable_journals(int index) {
  // @@protoc_insertion_point(field_mutable:huawei.proto.JournalArray.journals)
  return journals_.Mutable(index);
}
::huawei::proto::Journal* JournalArray::add_journals() {
  // @@protoc_insertion_point(field_add:huawei.proto.JournalArray.journals)
  return journals_.Add();
}
::google::protobuf::RepeatedPtrField< ::huawei::proto::Journal >*
JournalArray::mutable_journals() {
  // @@protoc_insertion_point(field_mutable_list:huawei.proto.JournalArray.journals)
  return &journals_;
}
const ::google::protobuf::RepeatedPtrField< ::huawei::proto::Journal >&
JournalArray::journals() const {
  // @@protoc_insertion_point(field_list:huawei.proto.JournalArray.journals)
  return journals_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace huawei

// @@protoc_insertion_point(global_scope)
