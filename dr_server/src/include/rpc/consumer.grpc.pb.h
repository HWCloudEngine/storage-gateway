// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: consumer.proto
// Original file comments:
// storage gateway rpc request/response
//
#ifndef GRPC_consumer_2eproto__INCLUDED
#define GRPC_consumer_2eproto__INCLUDED

#include "consumer.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace huawei {
namespace proto {

class Consumer GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // get the journal marker of specified volume and comsumer
    virtual ::grpc::Status GetJournalMarker(::grpc::ClientContext* context, const ::huawei::proto::GetJournalMarkerRequest& request, ::huawei::proto::GetJournalMarkerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::GetJournalMarkerResponse>> AsyncGetJournalMarker(::grpc::ClientContext* context, const ::huawei::proto::GetJournalMarkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::GetJournalMarkerResponse>>(AsyncGetJournalMarkerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetJournalList(::grpc::ClientContext* context, const ::huawei::proto::GetJournalListRequest& request, ::huawei::proto::GetJournalListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::GetJournalListResponse>> AsyncGetJournalList(::grpc::ClientContext* context, const ::huawei::proto::GetJournalListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::GetJournalListResponse>>(AsyncGetJournalListRaw(context, request, cq));
    }
    // update consumer maker when time out or comsumed a batch of logs
    virtual ::grpc::Status UpdateConsumerMarker(::grpc::ClientContext* context, const ::huawei::proto::UpdateConsumerMarkerRequest& request, ::huawei::proto::UpdateConsumerMarkerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::UpdateConsumerMarkerResponse>> AsyncUpdateConsumerMarker(::grpc::ClientContext* context, const ::huawei::proto::UpdateConsumerMarkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::UpdateConsumerMarkerResponse>>(AsyncUpdateConsumerMarkerRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::GetJournalMarkerResponse>* AsyncGetJournalMarkerRaw(::grpc::ClientContext* context, const ::huawei::proto::GetJournalMarkerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::GetJournalListResponse>* AsyncGetJournalListRaw(::grpc::ClientContext* context, const ::huawei::proto::GetJournalListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::UpdateConsumerMarkerResponse>* AsyncUpdateConsumerMarkerRaw(::grpc::ClientContext* context, const ::huawei::proto::UpdateConsumerMarkerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetJournalMarker(::grpc::ClientContext* context, const ::huawei::proto::GetJournalMarkerRequest& request, ::huawei::proto::GetJournalMarkerResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetJournalMarkerResponse>> AsyncGetJournalMarker(::grpc::ClientContext* context, const ::huawei::proto::GetJournalMarkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetJournalMarkerResponse>>(AsyncGetJournalMarkerRaw(context, request, cq));
    }
    ::grpc::Status GetJournalList(::grpc::ClientContext* context, const ::huawei::proto::GetJournalListRequest& request, ::huawei::proto::GetJournalListResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetJournalListResponse>> AsyncGetJournalList(::grpc::ClientContext* context, const ::huawei::proto::GetJournalListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetJournalListResponse>>(AsyncGetJournalListRaw(context, request, cq));
    }
    ::grpc::Status UpdateConsumerMarker(::grpc::ClientContext* context, const ::huawei::proto::UpdateConsumerMarkerRequest& request, ::huawei::proto::UpdateConsumerMarkerResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::UpdateConsumerMarkerResponse>> AsyncUpdateConsumerMarker(::grpc::ClientContext* context, const ::huawei::proto::UpdateConsumerMarkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::UpdateConsumerMarkerResponse>>(AsyncUpdateConsumerMarkerRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetJournalMarkerResponse>* AsyncGetJournalMarkerRaw(::grpc::ClientContext* context, const ::huawei::proto::GetJournalMarkerRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetJournalListResponse>* AsyncGetJournalListRaw(::grpc::ClientContext* context, const ::huawei::proto::GetJournalListRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::huawei::proto::UpdateConsumerMarkerResponse>* AsyncUpdateConsumerMarkerRaw(::grpc::ClientContext* context, const ::huawei::proto::UpdateConsumerMarkerRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_GetJournalMarker_;
    const ::grpc::RpcMethod rpcmethod_GetJournalList_;
    const ::grpc::RpcMethod rpcmethod_UpdateConsumerMarker_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // get the journal marker of specified volume and comsumer
    virtual ::grpc::Status GetJournalMarker(::grpc::ServerContext* context, const ::huawei::proto::GetJournalMarkerRequest* request, ::huawei::proto::GetJournalMarkerResponse* response);
    virtual ::grpc::Status GetJournalList(::grpc::ServerContext* context, const ::huawei::proto::GetJournalListRequest* request, ::huawei::proto::GetJournalListResponse* response);
    // update consumer maker when time out or comsumed a batch of logs
    virtual ::grpc::Status UpdateConsumerMarker(::grpc::ServerContext* context, const ::huawei::proto::UpdateConsumerMarkerRequest* request, ::huawei::proto::UpdateConsumerMarkerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetJournalMarker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetJournalMarker() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetJournalMarker() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJournalMarker(::grpc::ServerContext* context, const ::huawei::proto::GetJournalMarkerRequest* request, ::huawei::proto::GetJournalMarkerResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJournalMarker(::grpc::ServerContext* context, ::huawei::proto::GetJournalMarkerRequest* request, ::grpc::ServerAsyncResponseWriter< ::huawei::proto::GetJournalMarkerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetJournalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetJournalList() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetJournalList() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJournalList(::grpc::ServerContext* context, const ::huawei::proto::GetJournalListRequest* request, ::huawei::proto::GetJournalListResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJournalList(::grpc::ServerContext* context, ::huawei::proto::GetJournalListRequest* request, ::grpc::ServerAsyncResponseWriter< ::huawei::proto::GetJournalListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateConsumerMarker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateConsumerMarker() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateConsumerMarker() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateConsumerMarker(::grpc::ServerContext* context, const ::huawei::proto::UpdateConsumerMarkerRequest* request, ::huawei::proto::UpdateConsumerMarkerResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateConsumerMarker(::grpc::ServerContext* context, ::huawei::proto::UpdateConsumerMarkerRequest* request, ::grpc::ServerAsyncResponseWriter< ::huawei::proto::UpdateConsumerMarkerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetJournalMarker<WithAsyncMethod_GetJournalList<WithAsyncMethod_UpdateConsumerMarker<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetJournalMarker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetJournalMarker() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetJournalMarker() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJournalMarker(::grpc::ServerContext* context, const ::huawei::proto::GetJournalMarkerRequest* request, ::huawei::proto::GetJournalMarkerResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetJournalList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetJournalList() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetJournalList() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJournalList(::grpc::ServerContext* context, const ::huawei::proto::GetJournalListRequest* request, ::huawei::proto::GetJournalListResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateConsumerMarker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateConsumerMarker() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateConsumerMarker() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateConsumerMarker(::grpc::ServerContext* context, const ::huawei::proto::UpdateConsumerMarkerRequest* request, ::huawei::proto::UpdateConsumerMarkerResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace proto
}  // namespace huawei


#endif  // GRPC_consumer_2eproto__INCLUDED
