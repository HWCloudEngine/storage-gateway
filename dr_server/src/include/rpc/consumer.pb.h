// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consumer.proto

#ifndef PROTOBUF_consumer_2eproto__INCLUDED
#define PROTOBUF_consumer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace huawei {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_consumer_2eproto();
void protobuf_AssignDesc_consumer_2eproto();
void protobuf_ShutdownFile_consumer_2eproto();

class GetJournalListRequest;
class GetJournalListResponse;
class GetJournalMarkerRequest;
class GetJournalMarkerResponse;
class JournalMarker;
class UpdateConsumerMarkerRequest;
class UpdateConsumerMarkerResponse;

enum CONSUMER_TYPE {
  REPLAYER = 0,
  REPLICATER = 1,
  CONSUMER_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CONSUMER_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CONSUMER_TYPE_IsValid(int value);
const CONSUMER_TYPE CONSUMER_TYPE_MIN = REPLAYER;
const CONSUMER_TYPE CONSUMER_TYPE_MAX = REPLICATER;
const int CONSUMER_TYPE_ARRAYSIZE = CONSUMER_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CONSUMER_TYPE_descriptor();
inline const ::std::string& CONSUMER_TYPE_Name(CONSUMER_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CONSUMER_TYPE_descriptor(), value);
}
inline bool CONSUMER_TYPE_Parse(
    const ::std::string& name, CONSUMER_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CONSUMER_TYPE>(
    CONSUMER_TYPE_descriptor(), name, value);
}
// ===================================================================

class JournalMarker : public ::google::protobuf::Message {
 public:
  JournalMarker();
  virtual ~JournalMarker();

  JournalMarker(const JournalMarker& from);

  inline JournalMarker& operator=(const JournalMarker& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JournalMarker& default_instance();

  void Swap(JournalMarker* other);

  // implements Message ----------------------------------------------

  inline JournalMarker* New() const { return New(NULL); }

  JournalMarker* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JournalMarker& from);
  void MergeFrom(const JournalMarker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JournalMarker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cur_journal = 1;
  void clear_cur_journal();
  static const int kCurJournalFieldNumber = 1;
  const ::std::string& cur_journal() const;
  void set_cur_journal(const ::std::string& value);
  void set_cur_journal(const char* value);
  void set_cur_journal(const char* value, size_t size);
  ::std::string* mutable_cur_journal();
  ::std::string* release_cur_journal();
  void set_allocated_cur_journal(::std::string* cur_journal);

  // optional uint64 pos = 2;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  ::google::protobuf::uint64 pos() const;
  void set_pos(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:huawei.proto.JournalMarker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr cur_journal_;
  ::google::protobuf::uint64 pos_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consumer_2eproto();
  friend void protobuf_AssignDesc_consumer_2eproto();
  friend void protobuf_ShutdownFile_consumer_2eproto();

  void InitAsDefaultInstance();
  static JournalMarker* default_instance_;
};
// -------------------------------------------------------------------

class GetJournalMarkerRequest : public ::google::protobuf::Message {
 public:
  GetJournalMarkerRequest();
  virtual ~GetJournalMarkerRequest();

  GetJournalMarkerRequest(const GetJournalMarkerRequest& from);

  inline GetJournalMarkerRequest& operator=(const GetJournalMarkerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetJournalMarkerRequest& default_instance();

  void Swap(GetJournalMarkerRequest* other);

  // implements Message ----------------------------------------------

  inline GetJournalMarkerRequest* New() const { return New(NULL); }

  GetJournalMarkerRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetJournalMarkerRequest& from);
  void MergeFrom(const GetJournalMarkerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetJournalMarkerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string vol_id = 2;
  void clear_vol_id();
  static const int kVolIdFieldNumber = 2;
  const ::std::string& vol_id() const;
  void set_vol_id(const ::std::string& value);
  void set_vol_id(const char* value);
  void set_vol_id(const char* value, size_t size);
  ::std::string* mutable_vol_id();
  ::std::string* release_vol_id();
  void set_allocated_vol_id(::std::string* vol_id);

  // optional .huawei.proto.CONSUMER_TYPE type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::huawei::proto::CONSUMER_TYPE type() const;
  void set_type(::huawei::proto::CONSUMER_TYPE value);

  // @@protoc_insertion_point(class_scope:huawei.proto.GetJournalMarkerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr vol_id_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consumer_2eproto();
  friend void protobuf_AssignDesc_consumer_2eproto();
  friend void protobuf_ShutdownFile_consumer_2eproto();

  void InitAsDefaultInstance();
  static GetJournalMarkerRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetJournalMarkerResponse : public ::google::protobuf::Message {
 public:
  GetJournalMarkerResponse();
  virtual ~GetJournalMarkerResponse();

  GetJournalMarkerResponse(const GetJournalMarkerResponse& from);

  inline GetJournalMarkerResponse& operator=(const GetJournalMarkerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetJournalMarkerResponse& default_instance();

  void Swap(GetJournalMarkerResponse* other);

  // implements Message ----------------------------------------------

  inline GetJournalMarkerResponse* New() const { return New(NULL); }

  GetJournalMarkerResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetJournalMarkerResponse& from);
  void MergeFrom(const GetJournalMarkerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetJournalMarkerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .huawei.proto.RESULT result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::huawei::proto::RESULT result() const;
  void set_result(::huawei::proto::RESULT value);

  // optional .huawei.proto.JournalMarker marker = 2;
  bool has_marker() const;
  void clear_marker();
  static const int kMarkerFieldNumber = 2;
  const ::huawei::proto::JournalMarker& marker() const;
  ::huawei::proto::JournalMarker* mutable_marker();
  ::huawei::proto::JournalMarker* release_marker();
  void set_allocated_marker(::huawei::proto::JournalMarker* marker);

  // @@protoc_insertion_point(class_scope:huawei.proto.GetJournalMarkerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::huawei::proto::JournalMarker* marker_;
  int result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consumer_2eproto();
  friend void protobuf_AssignDesc_consumer_2eproto();
  friend void protobuf_ShutdownFile_consumer_2eproto();

  void InitAsDefaultInstance();
  static GetJournalMarkerResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetJournalListRequest : public ::google::protobuf::Message {
 public:
  GetJournalListRequest();
  virtual ~GetJournalListRequest();

  GetJournalListRequest(const GetJournalListRequest& from);

  inline GetJournalListRequest& operator=(const GetJournalListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetJournalListRequest& default_instance();

  void Swap(GetJournalListRequest* other);

  // implements Message ----------------------------------------------

  inline GetJournalListRequest* New() const { return New(NULL); }

  GetJournalListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetJournalListRequest& from);
  void MergeFrom(const GetJournalListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetJournalListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string vol_id = 2;
  void clear_vol_id();
  static const int kVolIdFieldNumber = 2;
  const ::std::string& vol_id() const;
  void set_vol_id(const ::std::string& value);
  void set_vol_id(const char* value);
  void set_vol_id(const char* value, size_t size);
  ::std::string* mutable_vol_id();
  ::std::string* release_vol_id();
  void set_allocated_vol_id(::std::string* vol_id);

  // optional .huawei.proto.CONSUMER_TYPE type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::huawei::proto::CONSUMER_TYPE type() const;
  void set_type(::huawei::proto::CONSUMER_TYPE value);

  // optional .huawei.proto.JournalMarker marker = 4;
  bool has_marker() const;
  void clear_marker();
  static const int kMarkerFieldNumber = 4;
  const ::huawei::proto::JournalMarker& marker() const;
  ::huawei::proto::JournalMarker* mutable_marker();
  ::huawei::proto::JournalMarker* release_marker();
  void set_allocated_marker(::huawei::proto::JournalMarker* marker);

  // optional int32 limit = 5;
  void clear_limit();
  static const int kLimitFieldNumber = 5;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:huawei.proto.GetJournalListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr vol_id_;
  ::huawei::proto::JournalMarker* marker_;
  int type_;
  ::google::protobuf::int32 limit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consumer_2eproto();
  friend void protobuf_AssignDesc_consumer_2eproto();
  friend void protobuf_ShutdownFile_consumer_2eproto();

  void InitAsDefaultInstance();
  static GetJournalListRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetJournalListResponse : public ::google::protobuf::Message {
 public:
  GetJournalListResponse();
  virtual ~GetJournalListResponse();

  GetJournalListResponse(const GetJournalListResponse& from);

  inline GetJournalListResponse& operator=(const GetJournalListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetJournalListResponse& default_instance();

  void Swap(GetJournalListResponse* other);

  // implements Message ----------------------------------------------

  inline GetJournalListResponse* New() const { return New(NULL); }

  GetJournalListResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetJournalListResponse& from);
  void MergeFrom(const GetJournalListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetJournalListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .huawei.proto.RESULT result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::huawei::proto::RESULT result() const;
  void set_result(::huawei::proto::RESULT value);

  // repeated string journals = 2;
  int journals_size() const;
  void clear_journals();
  static const int kJournalsFieldNumber = 2;
  const ::std::string& journals(int index) const;
  ::std::string* mutable_journals(int index);
  void set_journals(int index, const ::std::string& value);
  void set_journals(int index, const char* value);
  void set_journals(int index, const char* value, size_t size);
  ::std::string* add_journals();
  void add_journals(const ::std::string& value);
  void add_journals(const char* value);
  void add_journals(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& journals() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_journals();

  // @@protoc_insertion_point(class_scope:huawei.proto.GetJournalListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> journals_;
  int result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consumer_2eproto();
  friend void protobuf_AssignDesc_consumer_2eproto();
  friend void protobuf_ShutdownFile_consumer_2eproto();

  void InitAsDefaultInstance();
  static GetJournalListResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateConsumerMarkerRequest : public ::google::protobuf::Message {
 public:
  UpdateConsumerMarkerRequest();
  virtual ~UpdateConsumerMarkerRequest();

  UpdateConsumerMarkerRequest(const UpdateConsumerMarkerRequest& from);

  inline UpdateConsumerMarkerRequest& operator=(const UpdateConsumerMarkerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateConsumerMarkerRequest& default_instance();

  void Swap(UpdateConsumerMarkerRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateConsumerMarkerRequest* New() const { return New(NULL); }

  UpdateConsumerMarkerRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateConsumerMarkerRequest& from);
  void MergeFrom(const UpdateConsumerMarkerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateConsumerMarkerRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string vol_id = 2;
  void clear_vol_id();
  static const int kVolIdFieldNumber = 2;
  const ::std::string& vol_id() const;
  void set_vol_id(const ::std::string& value);
  void set_vol_id(const char* value);
  void set_vol_id(const char* value, size_t size);
  ::std::string* mutable_vol_id();
  ::std::string* release_vol_id();
  void set_allocated_vol_id(::std::string* vol_id);

  // optional .huawei.proto.CONSUMER_TYPE type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::huawei::proto::CONSUMER_TYPE type() const;
  void set_type(::huawei::proto::CONSUMER_TYPE value);

  // optional .huawei.proto.JournalMarker marker = 4;
  bool has_marker() const;
  void clear_marker();
  static const int kMarkerFieldNumber = 4;
  const ::huawei::proto::JournalMarker& marker() const;
  ::huawei::proto::JournalMarker* mutable_marker();
  ::huawei::proto::JournalMarker* release_marker();
  void set_allocated_marker(::huawei::proto::JournalMarker* marker);

  // @@protoc_insertion_point(class_scope:huawei.proto.UpdateConsumerMarkerRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr vol_id_;
  ::huawei::proto::JournalMarker* marker_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consumer_2eproto();
  friend void protobuf_AssignDesc_consumer_2eproto();
  friend void protobuf_ShutdownFile_consumer_2eproto();

  void InitAsDefaultInstance();
  static UpdateConsumerMarkerRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateConsumerMarkerResponse : public ::google::protobuf::Message {
 public:
  UpdateConsumerMarkerResponse();
  virtual ~UpdateConsumerMarkerResponse();

  UpdateConsumerMarkerResponse(const UpdateConsumerMarkerResponse& from);

  inline UpdateConsumerMarkerResponse& operator=(const UpdateConsumerMarkerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateConsumerMarkerResponse& default_instance();

  void Swap(UpdateConsumerMarkerResponse* other);

  // implements Message ----------------------------------------------

  inline UpdateConsumerMarkerResponse* New() const { return New(NULL); }

  UpdateConsumerMarkerResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateConsumerMarkerResponse& from);
  void MergeFrom(const UpdateConsumerMarkerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateConsumerMarkerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .huawei.proto.RESULT result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::huawei::proto::RESULT result() const;
  void set_result(::huawei::proto::RESULT value);

  // @@protoc_insertion_point(class_scope:huawei.proto.UpdateConsumerMarkerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_consumer_2eproto();
  friend void protobuf_AssignDesc_consumer_2eproto();
  friend void protobuf_ShutdownFile_consumer_2eproto();

  void InitAsDefaultInstance();
  static UpdateConsumerMarkerResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// JournalMarker

// optional string cur_journal = 1;
inline void JournalMarker::clear_cur_journal() {
  cur_journal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JournalMarker::cur_journal() const {
  // @@protoc_insertion_point(field_get:huawei.proto.JournalMarker.cur_journal)
  return cur_journal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JournalMarker::set_cur_journal(const ::std::string& value) {
  
  cur_journal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.JournalMarker.cur_journal)
}
inline void JournalMarker::set_cur_journal(const char* value) {
  
  cur_journal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.JournalMarker.cur_journal)
}
inline void JournalMarker::set_cur_journal(const char* value, size_t size) {
  
  cur_journal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.JournalMarker.cur_journal)
}
inline ::std::string* JournalMarker::mutable_cur_journal() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.JournalMarker.cur_journal)
  return cur_journal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JournalMarker::release_cur_journal() {
  // @@protoc_insertion_point(field_release:huawei.proto.JournalMarker.cur_journal)
  
  return cur_journal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JournalMarker::set_allocated_cur_journal(::std::string* cur_journal) {
  if (cur_journal != NULL) {
    
  } else {
    
  }
  cur_journal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cur_journal);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.JournalMarker.cur_journal)
}

// optional uint64 pos = 2;
inline void JournalMarker::clear_pos() {
  pos_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 JournalMarker::pos() const {
  // @@protoc_insertion_point(field_get:huawei.proto.JournalMarker.pos)
  return pos_;
}
inline void JournalMarker::set_pos(::google::protobuf::uint64 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.JournalMarker.pos)
}

// -------------------------------------------------------------------

// GetJournalMarkerRequest

// optional string uuid = 1;
inline void GetJournalMarkerRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetJournalMarkerRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalMarkerRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJournalMarkerRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalMarkerRequest.uuid)
}
inline void GetJournalMarkerRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetJournalMarkerRequest.uuid)
}
inline void GetJournalMarkerRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetJournalMarkerRequest.uuid)
}
inline ::std::string* GetJournalMarkerRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalMarkerRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetJournalMarkerRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetJournalMarkerRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJournalMarkerRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetJournalMarkerRequest.uuid)
}

// optional string vol_id = 2;
inline void GetJournalMarkerRequest::clear_vol_id() {
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetJournalMarkerRequest::vol_id() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalMarkerRequest.vol_id)
  return vol_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJournalMarkerRequest::set_vol_id(const ::std::string& value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalMarkerRequest.vol_id)
}
inline void GetJournalMarkerRequest::set_vol_id(const char* value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetJournalMarkerRequest.vol_id)
}
inline void GetJournalMarkerRequest::set_vol_id(const char* value, size_t size) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetJournalMarkerRequest.vol_id)
}
inline ::std::string* GetJournalMarkerRequest::mutable_vol_id() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalMarkerRequest.vol_id)
  return vol_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetJournalMarkerRequest::release_vol_id() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetJournalMarkerRequest.vol_id)
  
  return vol_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJournalMarkerRequest::set_allocated_vol_id(::std::string* vol_id) {
  if (vol_id != NULL) {
    
  } else {
    
  }
  vol_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vol_id);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetJournalMarkerRequest.vol_id)
}

// optional .huawei.proto.CONSUMER_TYPE type = 3;
inline void GetJournalMarkerRequest::clear_type() {
  type_ = 0;
}
inline ::huawei::proto::CONSUMER_TYPE GetJournalMarkerRequest::type() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalMarkerRequest.type)
  return static_cast< ::huawei::proto::CONSUMER_TYPE >(type_);
}
inline void GetJournalMarkerRequest::set_type(::huawei::proto::CONSUMER_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalMarkerRequest.type)
}

// -------------------------------------------------------------------

// GetJournalMarkerResponse

// optional .huawei.proto.RESULT result = 1;
inline void GetJournalMarkerResponse::clear_result() {
  result_ = 0;
}
inline ::huawei::proto::RESULT GetJournalMarkerResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalMarkerResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
inline void GetJournalMarkerResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalMarkerResponse.result)
}

// optional .huawei.proto.JournalMarker marker = 2;
inline bool GetJournalMarkerResponse::has_marker() const {
  return !_is_default_instance_ && marker_ != NULL;
}
inline void GetJournalMarkerResponse::clear_marker() {
  if (GetArenaNoVirtual() == NULL && marker_ != NULL) delete marker_;
  marker_ = NULL;
}
inline const ::huawei::proto::JournalMarker& GetJournalMarkerResponse::marker() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalMarkerResponse.marker)
  return marker_ != NULL ? *marker_ : *default_instance_->marker_;
}
inline ::huawei::proto::JournalMarker* GetJournalMarkerResponse::mutable_marker() {
  
  if (marker_ == NULL) {
    marker_ = new ::huawei::proto::JournalMarker;
  }
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalMarkerResponse.marker)
  return marker_;
}
inline ::huawei::proto::JournalMarker* GetJournalMarkerResponse::release_marker() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetJournalMarkerResponse.marker)
  
  ::huawei::proto::JournalMarker* temp = marker_;
  marker_ = NULL;
  return temp;
}
inline void GetJournalMarkerResponse::set_allocated_marker(::huawei::proto::JournalMarker* marker) {
  delete marker_;
  marker_ = marker;
  if (marker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetJournalMarkerResponse.marker)
}

// -------------------------------------------------------------------

// GetJournalListRequest

// optional string uuid = 1;
inline void GetJournalListRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetJournalListRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJournalListRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalListRequest.uuid)
}
inline void GetJournalListRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetJournalListRequest.uuid)
}
inline void GetJournalListRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetJournalListRequest.uuid)
}
inline ::std::string* GetJournalListRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalListRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetJournalListRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetJournalListRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJournalListRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetJournalListRequest.uuid)
}

// optional string vol_id = 2;
inline void GetJournalListRequest::clear_vol_id() {
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetJournalListRequest::vol_id() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListRequest.vol_id)
  return vol_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJournalListRequest::set_vol_id(const ::std::string& value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalListRequest.vol_id)
}
inline void GetJournalListRequest::set_vol_id(const char* value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetJournalListRequest.vol_id)
}
inline void GetJournalListRequest::set_vol_id(const char* value, size_t size) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetJournalListRequest.vol_id)
}
inline ::std::string* GetJournalListRequest::mutable_vol_id() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalListRequest.vol_id)
  return vol_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetJournalListRequest::release_vol_id() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetJournalListRequest.vol_id)
  
  return vol_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJournalListRequest::set_allocated_vol_id(::std::string* vol_id) {
  if (vol_id != NULL) {
    
  } else {
    
  }
  vol_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vol_id);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetJournalListRequest.vol_id)
}

// optional .huawei.proto.CONSUMER_TYPE type = 3;
inline void GetJournalListRequest::clear_type() {
  type_ = 0;
}
inline ::huawei::proto::CONSUMER_TYPE GetJournalListRequest::type() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListRequest.type)
  return static_cast< ::huawei::proto::CONSUMER_TYPE >(type_);
}
inline void GetJournalListRequest::set_type(::huawei::proto::CONSUMER_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalListRequest.type)
}

// optional .huawei.proto.JournalMarker marker = 4;
inline bool GetJournalListRequest::has_marker() const {
  return !_is_default_instance_ && marker_ != NULL;
}
inline void GetJournalListRequest::clear_marker() {
  if (GetArenaNoVirtual() == NULL && marker_ != NULL) delete marker_;
  marker_ = NULL;
}
inline const ::huawei::proto::JournalMarker& GetJournalListRequest::marker() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListRequest.marker)
  return marker_ != NULL ? *marker_ : *default_instance_->marker_;
}
inline ::huawei::proto::JournalMarker* GetJournalListRequest::mutable_marker() {
  
  if (marker_ == NULL) {
    marker_ = new ::huawei::proto::JournalMarker;
  }
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalListRequest.marker)
  return marker_;
}
inline ::huawei::proto::JournalMarker* GetJournalListRequest::release_marker() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetJournalListRequest.marker)
  
  ::huawei::proto::JournalMarker* temp = marker_;
  marker_ = NULL;
  return temp;
}
inline void GetJournalListRequest::set_allocated_marker(::huawei::proto::JournalMarker* marker) {
  delete marker_;
  marker_ = marker;
  if (marker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetJournalListRequest.marker)
}

// optional int32 limit = 5;
inline void GetJournalListRequest::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 GetJournalListRequest::limit() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListRequest.limit)
  return limit_;
}
inline void GetJournalListRequest::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalListRequest.limit)
}

// -------------------------------------------------------------------

// GetJournalListResponse

// optional .huawei.proto.RESULT result = 1;
inline void GetJournalListResponse::clear_result() {
  result_ = 0;
}
inline ::huawei::proto::RESULT GetJournalListResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
inline void GetJournalListResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalListResponse.result)
}

// repeated string journals = 2;
inline int GetJournalListResponse::journals_size() const {
  return journals_.size();
}
inline void GetJournalListResponse::clear_journals() {
  journals_.Clear();
}
inline const ::std::string& GetJournalListResponse::journals(int index) const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListResponse.journals)
  return journals_.Get(index);
}
inline ::std::string* GetJournalListResponse::mutable_journals(int index) {
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalListResponse.journals)
  return journals_.Mutable(index);
}
inline void GetJournalListResponse::set_journals(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalListResponse.journals)
  journals_.Mutable(index)->assign(value);
}
inline void GetJournalListResponse::set_journals(int index, const char* value) {
  journals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetJournalListResponse.journals)
}
inline void GetJournalListResponse::set_journals(int index, const char* value, size_t size) {
  journals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetJournalListResponse.journals)
}
inline ::std::string* GetJournalListResponse::add_journals() {
  // @@protoc_insertion_point(field_add_mutable:huawei.proto.GetJournalListResponse.journals)
  return journals_.Add();
}
inline void GetJournalListResponse::add_journals(const ::std::string& value) {
  journals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:huawei.proto.GetJournalListResponse.journals)
}
inline void GetJournalListResponse::add_journals(const char* value) {
  journals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:huawei.proto.GetJournalListResponse.journals)
}
inline void GetJournalListResponse::add_journals(const char* value, size_t size) {
  journals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:huawei.proto.GetJournalListResponse.journals)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetJournalListResponse::journals() const {
  // @@protoc_insertion_point(field_list:huawei.proto.GetJournalListResponse.journals)
  return journals_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetJournalListResponse::mutable_journals() {
  // @@protoc_insertion_point(field_mutable_list:huawei.proto.GetJournalListResponse.journals)
  return &journals_;
}

// -------------------------------------------------------------------

// UpdateConsumerMarkerRequest

// optional string uuid = 1;
inline void UpdateConsumerMarkerRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateConsumerMarkerRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.UpdateConsumerMarkerRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateConsumerMarkerRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.UpdateConsumerMarkerRequest.uuid)
}
inline void UpdateConsumerMarkerRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.UpdateConsumerMarkerRequest.uuid)
}
inline void UpdateConsumerMarkerRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.UpdateConsumerMarkerRequest.uuid)
}
inline ::std::string* UpdateConsumerMarkerRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.UpdateConsumerMarkerRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateConsumerMarkerRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.UpdateConsumerMarkerRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateConsumerMarkerRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.UpdateConsumerMarkerRequest.uuid)
}

// optional string vol_id = 2;
inline void UpdateConsumerMarkerRequest::clear_vol_id() {
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateConsumerMarkerRequest::vol_id() const {
  // @@protoc_insertion_point(field_get:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
  return vol_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateConsumerMarkerRequest::set_vol_id(const ::std::string& value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
}
inline void UpdateConsumerMarkerRequest::set_vol_id(const char* value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
}
inline void UpdateConsumerMarkerRequest::set_vol_id(const char* value, size_t size) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
}
inline ::std::string* UpdateConsumerMarkerRequest::mutable_vol_id() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
  return vol_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateConsumerMarkerRequest::release_vol_id() {
  // @@protoc_insertion_point(field_release:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
  
  return vol_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateConsumerMarkerRequest::set_allocated_vol_id(::std::string* vol_id) {
  if (vol_id != NULL) {
    
  } else {
    
  }
  vol_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vol_id);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
}

// optional .huawei.proto.CONSUMER_TYPE type = 3;
inline void UpdateConsumerMarkerRequest::clear_type() {
  type_ = 0;
}
inline ::huawei::proto::CONSUMER_TYPE UpdateConsumerMarkerRequest::type() const {
  // @@protoc_insertion_point(field_get:huawei.proto.UpdateConsumerMarkerRequest.type)
  return static_cast< ::huawei::proto::CONSUMER_TYPE >(type_);
}
inline void UpdateConsumerMarkerRequest::set_type(::huawei::proto::CONSUMER_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.UpdateConsumerMarkerRequest.type)
}

// optional .huawei.proto.JournalMarker marker = 4;
inline bool UpdateConsumerMarkerRequest::has_marker() const {
  return !_is_default_instance_ && marker_ != NULL;
}
inline void UpdateConsumerMarkerRequest::clear_marker() {
  if (GetArenaNoVirtual() == NULL && marker_ != NULL) delete marker_;
  marker_ = NULL;
}
inline const ::huawei::proto::JournalMarker& UpdateConsumerMarkerRequest::marker() const {
  // @@protoc_insertion_point(field_get:huawei.proto.UpdateConsumerMarkerRequest.marker)
  return marker_ != NULL ? *marker_ : *default_instance_->marker_;
}
inline ::huawei::proto::JournalMarker* UpdateConsumerMarkerRequest::mutable_marker() {
  
  if (marker_ == NULL) {
    marker_ = new ::huawei::proto::JournalMarker;
  }
  // @@protoc_insertion_point(field_mutable:huawei.proto.UpdateConsumerMarkerRequest.marker)
  return marker_;
}
inline ::huawei::proto::JournalMarker* UpdateConsumerMarkerRequest::release_marker() {
  // @@protoc_insertion_point(field_release:huawei.proto.UpdateConsumerMarkerRequest.marker)
  
  ::huawei::proto::JournalMarker* temp = marker_;
  marker_ = NULL;
  return temp;
}
inline void UpdateConsumerMarkerRequest::set_allocated_marker(::huawei::proto::JournalMarker* marker) {
  delete marker_;
  marker_ = marker;
  if (marker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.UpdateConsumerMarkerRequest.marker)
}

// -------------------------------------------------------------------

// UpdateConsumerMarkerResponse

// optional .huawei.proto.RESULT result = 1;
inline void UpdateConsumerMarkerResponse::clear_result() {
  result_ = 0;
}
inline ::huawei::proto::RESULT UpdateConsumerMarkerResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.UpdateConsumerMarkerResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
inline void UpdateConsumerMarkerResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.UpdateConsumerMarkerResponse.result)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace huawei

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::huawei::proto::CONSUMER_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::huawei::proto::CONSUMER_TYPE>() {
  return ::huawei::proto::CONSUMER_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_consumer_2eproto__INCLUDED
