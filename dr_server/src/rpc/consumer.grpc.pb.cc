// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: consumer.proto

#include "consumer.pb.h"
#include "consumer.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace huawei {
namespace proto {

static const char* Consumer_method_names[] = {
  "/huawei.proto.Consumer/GetJournalMarker",
  "/huawei.proto.Consumer/GetJournalList",
  "/huawei.proto.Consumer/UpdateConsumerMarker",
};

std::unique_ptr< Consumer::Stub> Consumer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Consumer::Stub> stub(new Consumer::Stub(channel));
  return stub;
}

Consumer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetJournalMarker_(Consumer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJournalList_(Consumer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateConsumerMarker_(Consumer_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Consumer::Stub::GetJournalMarker(::grpc::ClientContext* context, const ::huawei::proto::GetJournalMarkerRequest& request, ::huawei::proto::GetJournalMarkerResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetJournalMarker_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::huawei::proto::GetJournalMarkerResponse>* Consumer::Stub::AsyncGetJournalMarkerRaw(::grpc::ClientContext* context, const ::huawei::proto::GetJournalMarkerRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetJournalMarkerResponse>(channel_.get(), cq, rpcmethod_GetJournalMarker_, context, request);
}

::grpc::Status Consumer::Stub::GetJournalList(::grpc::ClientContext* context, const ::huawei::proto::GetJournalListRequest& request, ::huawei::proto::GetJournalListResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetJournalList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::huawei::proto::GetJournalListResponse>* Consumer::Stub::AsyncGetJournalListRaw(::grpc::ClientContext* context, const ::huawei::proto::GetJournalListRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetJournalListResponse>(channel_.get(), cq, rpcmethod_GetJournalList_, context, request);
}

::grpc::Status Consumer::Stub::UpdateConsumerMarker(::grpc::ClientContext* context, const ::huawei::proto::UpdateConsumerMarkerRequest& request, ::huawei::proto::UpdateConsumerMarkerResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateConsumerMarker_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::huawei::proto::UpdateConsumerMarkerResponse>* Consumer::Stub::AsyncUpdateConsumerMarkerRaw(::grpc::ClientContext* context, const ::huawei::proto::UpdateConsumerMarkerRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::huawei::proto::UpdateConsumerMarkerResponse>(channel_.get(), cq, rpcmethod_UpdateConsumerMarker_, context, request);
}

Consumer::Service::Service() {
  (void)Consumer_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Consumer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Consumer::Service, ::huawei::proto::GetJournalMarkerRequest, ::huawei::proto::GetJournalMarkerResponse>(
          std::mem_fn(&Consumer::Service::GetJournalMarker), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Consumer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Consumer::Service, ::huawei::proto::GetJournalListRequest, ::huawei::proto::GetJournalListResponse>(
          std::mem_fn(&Consumer::Service::GetJournalList), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Consumer_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Consumer::Service, ::huawei::proto::UpdateConsumerMarkerRequest, ::huawei::proto::UpdateConsumerMarkerResponse>(
          std::mem_fn(&Consumer::Service::UpdateConsumerMarker), this)));
}

Consumer::Service::~Service() {
}

::grpc::Status Consumer::Service::GetJournalMarker(::grpc::ServerContext* context, const ::huawei::proto::GetJournalMarkerRequest* request, ::huawei::proto::GetJournalMarkerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Consumer::Service::GetJournalList(::grpc::ServerContext* context, const ::huawei::proto::GetJournalListRequest* request, ::huawei::proto::GetJournalListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Consumer::Service::UpdateConsumerMarker(::grpc::ServerContext* context, const ::huawei::proto::UpdateConsumerMarkerRequest* request, ::huawei::proto::UpdateConsumerMarkerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace huawei
}  // namespace proto

