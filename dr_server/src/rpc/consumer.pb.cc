// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consumer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "consumer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace huawei {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* JournalMarker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JournalMarker_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetJournalMarkerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetJournalMarkerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetJournalMarkerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetJournalMarkerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetJournalListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetJournalListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetJournalListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetJournalListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateConsumerMarkerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateConsumerMarkerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateConsumerMarkerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateConsumerMarkerResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CONSUMER_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_consumer_2eproto() {
  protobuf_AddDesc_consumer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "consumer.proto");
  GOOGLE_CHECK(file != NULL);
  JournalMarker_descriptor_ = file->message_type(0);
  static const int JournalMarker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalMarker, cur_journal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalMarker, pos_),
  };
  JournalMarker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JournalMarker_descriptor_,
      JournalMarker::default_instance_,
      JournalMarker_offsets_,
      -1,
      -1,
      -1,
      sizeof(JournalMarker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalMarker, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalMarker, _is_default_instance_));
  GetJournalMarkerRequest_descriptor_ = file->message_type(1);
  static const int GetJournalMarkerRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalMarkerRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalMarkerRequest, vol_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalMarkerRequest, type_),
  };
  GetJournalMarkerRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetJournalMarkerRequest_descriptor_,
      GetJournalMarkerRequest::default_instance_,
      GetJournalMarkerRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetJournalMarkerRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalMarkerRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalMarkerRequest, _is_default_instance_));
  GetJournalMarkerResponse_descriptor_ = file->message_type(2);
  static const int GetJournalMarkerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalMarkerResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalMarkerResponse, marker_),
  };
  GetJournalMarkerResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetJournalMarkerResponse_descriptor_,
      GetJournalMarkerResponse::default_instance_,
      GetJournalMarkerResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetJournalMarkerResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalMarkerResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalMarkerResponse, _is_default_instance_));
  GetJournalListRequest_descriptor_ = file->message_type(3);
  static const int GetJournalListRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalListRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalListRequest, vol_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalListRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalListRequest, marker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalListRequest, limit_),
  };
  GetJournalListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetJournalListRequest_descriptor_,
      GetJournalListRequest::default_instance_,
      GetJournalListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetJournalListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalListRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalListRequest, _is_default_instance_));
  GetJournalListResponse_descriptor_ = file->message_type(4);
  static const int GetJournalListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalListResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalListResponse, journals_),
  };
  GetJournalListResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetJournalListResponse_descriptor_,
      GetJournalListResponse::default_instance_,
      GetJournalListResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetJournalListResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalListResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetJournalListResponse, _is_default_instance_));
  UpdateConsumerMarkerRequest_descriptor_ = file->message_type(5);
  static const int UpdateConsumerMarkerRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConsumerMarkerRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConsumerMarkerRequest, vol_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConsumerMarkerRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConsumerMarkerRequest, marker_),
  };
  UpdateConsumerMarkerRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateConsumerMarkerRequest_descriptor_,
      UpdateConsumerMarkerRequest::default_instance_,
      UpdateConsumerMarkerRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateConsumerMarkerRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConsumerMarkerRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConsumerMarkerRequest, _is_default_instance_));
  UpdateConsumerMarkerResponse_descriptor_ = file->message_type(6);
  static const int UpdateConsumerMarkerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConsumerMarkerResponse, result_),
  };
  UpdateConsumerMarkerResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateConsumerMarkerResponse_descriptor_,
      UpdateConsumerMarkerResponse::default_instance_,
      UpdateConsumerMarkerResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateConsumerMarkerResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConsumerMarkerResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConsumerMarkerResponse, _is_default_instance_));
  CONSUMER_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_consumer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JournalMarker_descriptor_, &JournalMarker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetJournalMarkerRequest_descriptor_, &GetJournalMarkerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetJournalMarkerResponse_descriptor_, &GetJournalMarkerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetJournalListRequest_descriptor_, &GetJournalListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetJournalListResponse_descriptor_, &GetJournalListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateConsumerMarkerRequest_descriptor_, &UpdateConsumerMarkerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateConsumerMarkerResponse_descriptor_, &UpdateConsumerMarkerResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_consumer_2eproto() {
  delete JournalMarker::default_instance_;
  delete JournalMarker_reflection_;
  delete GetJournalMarkerRequest::default_instance_;
  delete GetJournalMarkerRequest_reflection_;
  delete GetJournalMarkerResponse::default_instance_;
  delete GetJournalMarkerResponse_reflection_;
  delete GetJournalListRequest::default_instance_;
  delete GetJournalListRequest_reflection_;
  delete GetJournalListResponse::default_instance_;
  delete GetJournalListResponse_reflection_;
  delete UpdateConsumerMarkerRequest::default_instance_;
  delete UpdateConsumerMarkerRequest_reflection_;
  delete UpdateConsumerMarkerResponse::default_instance_;
  delete UpdateConsumerMarkerResponse_reflection_;
}

void protobuf_AddDesc_consumer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::huawei::proto::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016consumer.proto\022\014huawei.proto\032\014common.p"
    "roto\"1\n\rJournalMarker\022\023\n\013cur_journal\030\001 \001"
    "(\t\022\013\n\003pos\030\002 \001(\004\"b\n\027GetJournalMarkerReque"
    "st\022\014\n\004uuid\030\001 \001(\t\022\016\n\006vol_id\030\002 \001(\t\022)\n\004type"
    "\030\003 \001(\0162\033.huawei.proto.CONSUMER_TYPE\"m\n\030G"
    "etJournalMarkerResponse\022$\n\006result\030\001 \001(\0162"
    "\024.huawei.proto.RESULT\022+\n\006marker\030\002 \001(\0132\033."
    "huawei.proto.JournalMarker\"\234\001\n\025GetJourna"
    "lListRequest\022\014\n\004uuid\030\001 \001(\t\022\016\n\006vol_id\030\002 \001"
    "(\t\022)\n\004type\030\003 \001(\0162\033.huawei.proto.CONSUMER"
    "_TYPE\022+\n\006marker\030\004 \001(\0132\033.huawei.proto.Jou"
    "rnalMarker\022\r\n\005limit\030\005 \001(\005\"P\n\026GetJournalL"
    "istResponse\022$\n\006result\030\001 \001(\0162\024.huawei.pro"
    "to.RESULT\022\020\n\010journals\030\002 \003(\t\"\223\001\n\033UpdateCo"
    "nsumerMarkerRequest\022\014\n\004uuid\030\001 \001(\t\022\016\n\006vol"
    "_id\030\002 \001(\t\022)\n\004type\030\003 \001(\0162\033.huawei.proto.C"
    "ONSUMER_TYPE\022+\n\006marker\030\004 \001(\0132\033.huawei.pr"
    "oto.JournalMarker\"D\n\034UpdateConsumerMarke"
    "rResponse\022$\n\006result\030\001 \001(\0162\024.huawei.proto"
    ".RESULT*-\n\rCONSUMER_TYPE\022\014\n\010REPLAYER\020\000\022\016"
    "\n\nREPLICATER\020\0012\277\002\n\010Consumer\022c\n\020GetJourna"
    "lMarker\022%.huawei.proto.GetJournalMarkerR"
    "equest\032&.huawei.proto.GetJournalMarkerRe"
    "sponse\"\000\022]\n\016GetJournalList\022#.huawei.prot"
    "o.GetJournalListRequest\032$.huawei.proto.G"
    "etJournalListResponse\"\000\022o\n\024UpdateConsume"
    "rMarker\022).huawei.proto.UpdateConsumerMar"
    "kerRequest\032*.huawei.proto.UpdateConsumer"
    "MarkerResponse\"\000B\006\242\002\003DRSb\006proto3", 1152);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "consumer.proto", &protobuf_RegisterTypes);
  JournalMarker::default_instance_ = new JournalMarker();
  GetJournalMarkerRequest::default_instance_ = new GetJournalMarkerRequest();
  GetJournalMarkerResponse::default_instance_ = new GetJournalMarkerResponse();
  GetJournalListRequest::default_instance_ = new GetJournalListRequest();
  GetJournalListResponse::default_instance_ = new GetJournalListResponse();
  UpdateConsumerMarkerRequest::default_instance_ = new UpdateConsumerMarkerRequest();
  UpdateConsumerMarkerResponse::default_instance_ = new UpdateConsumerMarkerResponse();
  JournalMarker::default_instance_->InitAsDefaultInstance();
  GetJournalMarkerRequest::default_instance_->InitAsDefaultInstance();
  GetJournalMarkerResponse::default_instance_->InitAsDefaultInstance();
  GetJournalListRequest::default_instance_->InitAsDefaultInstance();
  GetJournalListResponse::default_instance_->InitAsDefaultInstance();
  UpdateConsumerMarkerRequest::default_instance_->InitAsDefaultInstance();
  UpdateConsumerMarkerResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_consumer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_consumer_2eproto {
  StaticDescriptorInitializer_consumer_2eproto() {
    protobuf_AddDesc_consumer_2eproto();
  }
} static_descriptor_initializer_consumer_2eproto_;
const ::google::protobuf::EnumDescriptor* CONSUMER_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CONSUMER_TYPE_descriptor_;
}
bool CONSUMER_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JournalMarker::kCurJournalFieldNumber;
const int JournalMarker::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JournalMarker::JournalMarker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.JournalMarker)
}

void JournalMarker::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

JournalMarker::JournalMarker(const JournalMarker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.JournalMarker)
}

void JournalMarker::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cur_journal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = GOOGLE_ULONGLONG(0);
}

JournalMarker::~JournalMarker() {
  // @@protoc_insertion_point(destructor:huawei.proto.JournalMarker)
  SharedDtor();
}

void JournalMarker::SharedDtor() {
  cur_journal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void JournalMarker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JournalMarker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JournalMarker_descriptor_;
}

const JournalMarker& JournalMarker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_consumer_2eproto();
  return *default_instance_;
}

JournalMarker* JournalMarker::default_instance_ = NULL;

JournalMarker* JournalMarker::New(::google::protobuf::Arena* arena) const {
  JournalMarker* n = new JournalMarker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JournalMarker::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.JournalMarker)
  cur_journal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = GOOGLE_ULONGLONG(0);
}

bool JournalMarker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.JournalMarker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cur_journal = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_journal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cur_journal().data(), this->cur_journal().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.JournalMarker.cur_journal"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint64 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pos_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.JournalMarker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.JournalMarker)
  return false;
#undef DO_
}

void JournalMarker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.JournalMarker)
  // optional string cur_journal = 1;
  if (this->cur_journal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cur_journal().data(), this->cur_journal().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.JournalMarker.cur_journal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cur_journal(), output);
  }

  // optional uint64 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pos(), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.JournalMarker)
}

::google::protobuf::uint8* JournalMarker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.JournalMarker)
  // optional string cur_journal = 1;
  if (this->cur_journal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cur_journal().data(), this->cur_journal().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.JournalMarker.cur_journal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cur_journal(), target);
  }

  // optional uint64 pos = 2;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pos(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.JournalMarker)
  return target;
}

int JournalMarker::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.JournalMarker)
  int total_size = 0;

  // optional string cur_journal = 1;
  if (this->cur_journal().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cur_journal());
  }

  // optional uint64 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pos());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JournalMarker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.JournalMarker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JournalMarker* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JournalMarker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.JournalMarker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.JournalMarker)
    MergeFrom(*source);
  }
}

void JournalMarker::MergeFrom(const JournalMarker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.JournalMarker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.cur_journal().size() > 0) {

    cur_journal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cur_journal_);
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
}

void JournalMarker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.JournalMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JournalMarker::CopyFrom(const JournalMarker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.JournalMarker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalMarker::IsInitialized() const {

  return true;
}

void JournalMarker::Swap(JournalMarker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JournalMarker::InternalSwap(JournalMarker* other) {
  cur_journal_.Swap(&other->cur_journal_);
  std::swap(pos_, other->pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JournalMarker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JournalMarker_descriptor_;
  metadata.reflection = JournalMarker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JournalMarker

// optional string cur_journal = 1;
void JournalMarker::clear_cur_journal() {
  cur_journal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& JournalMarker::cur_journal() const {
  // @@protoc_insertion_point(field_get:huawei.proto.JournalMarker.cur_journal)
  return cur_journal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JournalMarker::set_cur_journal(const ::std::string& value) {
  
  cur_journal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.JournalMarker.cur_journal)
}
 void JournalMarker::set_cur_journal(const char* value) {
  
  cur_journal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.JournalMarker.cur_journal)
}
 void JournalMarker::set_cur_journal(const char* value, size_t size) {
  
  cur_journal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.JournalMarker.cur_journal)
}
 ::std::string* JournalMarker::mutable_cur_journal() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.JournalMarker.cur_journal)
  return cur_journal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JournalMarker::release_cur_journal() {
  // @@protoc_insertion_point(field_release:huawei.proto.JournalMarker.cur_journal)
  
  return cur_journal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JournalMarker::set_allocated_cur_journal(::std::string* cur_journal) {
  if (cur_journal != NULL) {
    
  } else {
    
  }
  cur_journal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cur_journal);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.JournalMarker.cur_journal)
}

// optional uint64 pos = 2;
void JournalMarker::clear_pos() {
  pos_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 JournalMarker::pos() const {
  // @@protoc_insertion_point(field_get:huawei.proto.JournalMarker.pos)
  return pos_;
}
 void JournalMarker::set_pos(::google::protobuf::uint64 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.JournalMarker.pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetJournalMarkerRequest::kUuidFieldNumber;
const int GetJournalMarkerRequest::kVolIdFieldNumber;
const int GetJournalMarkerRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetJournalMarkerRequest::GetJournalMarkerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.GetJournalMarkerRequest)
}

void GetJournalMarkerRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetJournalMarkerRequest::GetJournalMarkerRequest(const GetJournalMarkerRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.GetJournalMarkerRequest)
}

void GetJournalMarkerRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

GetJournalMarkerRequest::~GetJournalMarkerRequest() {
  // @@protoc_insertion_point(destructor:huawei.proto.GetJournalMarkerRequest)
  SharedDtor();
}

void GetJournalMarkerRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetJournalMarkerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetJournalMarkerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetJournalMarkerRequest_descriptor_;
}

const GetJournalMarkerRequest& GetJournalMarkerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_consumer_2eproto();
  return *default_instance_;
}

GetJournalMarkerRequest* GetJournalMarkerRequest::default_instance_ = NULL;

GetJournalMarkerRequest* GetJournalMarkerRequest::New(::google::protobuf::Arena* arena) const {
  GetJournalMarkerRequest* n = new GetJournalMarkerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetJournalMarkerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.GetJournalMarkerRequest)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool GetJournalMarkerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.GetJournalMarkerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.GetJournalMarkerRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vol_id;
        break;
      }

      // optional string vol_id = 2;
      case 2: {
        if (tag == 18) {
         parse_vol_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vol_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vol_id().data(), this->vol_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.GetJournalMarkerRequest.vol_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .huawei.proto.CONSUMER_TYPE type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::huawei::proto::CONSUMER_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.GetJournalMarkerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.GetJournalMarkerRequest)
  return false;
#undef DO_
}

void GetJournalMarkerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.GetJournalMarkerRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetJournalMarkerRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vol_id().data(), this->vol_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetJournalMarkerRequest.vol_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vol_id(), output);
  }

  // optional .huawei.proto.CONSUMER_TYPE type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.GetJournalMarkerRequest)
}

::google::protobuf::uint8* GetJournalMarkerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.GetJournalMarkerRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetJournalMarkerRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vol_id().data(), this->vol_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetJournalMarkerRequest.vol_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vol_id(), target);
  }

  // optional .huawei.proto.CONSUMER_TYPE type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.GetJournalMarkerRequest)
  return target;
}

int GetJournalMarkerRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.GetJournalMarkerRequest)
  int total_size = 0;

  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vol_id());
  }

  // optional .huawei.proto.CONSUMER_TYPE type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetJournalMarkerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.GetJournalMarkerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetJournalMarkerRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetJournalMarkerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.GetJournalMarkerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.GetJournalMarkerRequest)
    MergeFrom(*source);
  }
}

void GetJournalMarkerRequest::MergeFrom(const GetJournalMarkerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.GetJournalMarkerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.vol_id().size() > 0) {

    vol_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vol_id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GetJournalMarkerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.GetJournalMarkerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetJournalMarkerRequest::CopyFrom(const GetJournalMarkerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.GetJournalMarkerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJournalMarkerRequest::IsInitialized() const {

  return true;
}

void GetJournalMarkerRequest::Swap(GetJournalMarkerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetJournalMarkerRequest::InternalSwap(GetJournalMarkerRequest* other) {
  uuid_.Swap(&other->uuid_);
  vol_id_.Swap(&other->vol_id_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetJournalMarkerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetJournalMarkerRequest_descriptor_;
  metadata.reflection = GetJournalMarkerRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetJournalMarkerRequest

// optional string uuid = 1;
void GetJournalMarkerRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetJournalMarkerRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalMarkerRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetJournalMarkerRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalMarkerRequest.uuid)
}
 void GetJournalMarkerRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetJournalMarkerRequest.uuid)
}
 void GetJournalMarkerRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetJournalMarkerRequest.uuid)
}
 ::std::string* GetJournalMarkerRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalMarkerRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetJournalMarkerRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetJournalMarkerRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetJournalMarkerRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetJournalMarkerRequest.uuid)
}

// optional string vol_id = 2;
void GetJournalMarkerRequest::clear_vol_id() {
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetJournalMarkerRequest::vol_id() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalMarkerRequest.vol_id)
  return vol_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetJournalMarkerRequest::set_vol_id(const ::std::string& value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalMarkerRequest.vol_id)
}
 void GetJournalMarkerRequest::set_vol_id(const char* value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetJournalMarkerRequest.vol_id)
}
 void GetJournalMarkerRequest::set_vol_id(const char* value, size_t size) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetJournalMarkerRequest.vol_id)
}
 ::std::string* GetJournalMarkerRequest::mutable_vol_id() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalMarkerRequest.vol_id)
  return vol_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetJournalMarkerRequest::release_vol_id() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetJournalMarkerRequest.vol_id)
  
  return vol_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetJournalMarkerRequest::set_allocated_vol_id(::std::string* vol_id) {
  if (vol_id != NULL) {
    
  } else {
    
  }
  vol_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vol_id);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetJournalMarkerRequest.vol_id)
}

// optional .huawei.proto.CONSUMER_TYPE type = 3;
void GetJournalMarkerRequest::clear_type() {
  type_ = 0;
}
 ::huawei::proto::CONSUMER_TYPE GetJournalMarkerRequest::type() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalMarkerRequest.type)
  return static_cast< ::huawei::proto::CONSUMER_TYPE >(type_);
}
 void GetJournalMarkerRequest::set_type(::huawei::proto::CONSUMER_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalMarkerRequest.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetJournalMarkerResponse::kResultFieldNumber;
const int GetJournalMarkerResponse::kMarkerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetJournalMarkerResponse::GetJournalMarkerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.GetJournalMarkerResponse)
}

void GetJournalMarkerResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  marker_ = const_cast< ::huawei::proto::JournalMarker*>(&::huawei::proto::JournalMarker::default_instance());
}

GetJournalMarkerResponse::GetJournalMarkerResponse(const GetJournalMarkerResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.GetJournalMarkerResponse)
}

void GetJournalMarkerResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
  marker_ = NULL;
}

GetJournalMarkerResponse::~GetJournalMarkerResponse() {
  // @@protoc_insertion_point(destructor:huawei.proto.GetJournalMarkerResponse)
  SharedDtor();
}

void GetJournalMarkerResponse::SharedDtor() {
  if (this != default_instance_) {
    delete marker_;
  }
}

void GetJournalMarkerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetJournalMarkerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetJournalMarkerResponse_descriptor_;
}

const GetJournalMarkerResponse& GetJournalMarkerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_consumer_2eproto();
  return *default_instance_;
}

GetJournalMarkerResponse* GetJournalMarkerResponse::default_instance_ = NULL;

GetJournalMarkerResponse* GetJournalMarkerResponse::New(::google::protobuf::Arena* arena) const {
  GetJournalMarkerResponse* n = new GetJournalMarkerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetJournalMarkerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.GetJournalMarkerResponse)
  result_ = 0;
  if (GetArenaNoVirtual() == NULL && marker_ != NULL) delete marker_;
  marker_ = NULL;
}

bool GetJournalMarkerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.GetJournalMarkerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .huawei.proto.RESULT result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::huawei::proto::RESULT >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_marker;
        break;
      }

      // optional .huawei.proto.JournalMarker marker = 2;
      case 2: {
        if (tag == 18) {
         parse_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.GetJournalMarkerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.GetJournalMarkerResponse)
  return false;
#undef DO_
}

void GetJournalMarkerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.GetJournalMarkerResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .huawei.proto.JournalMarker marker = 2;
  if (this->has_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->marker_, output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.GetJournalMarkerResponse)
}

::google::protobuf::uint8* GetJournalMarkerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.GetJournalMarkerResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .huawei.proto.JournalMarker marker = 2;
  if (this->has_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->marker_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.GetJournalMarkerResponse)
  return target;
}

int GetJournalMarkerResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.GetJournalMarkerResponse)
  int total_size = 0;

  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // optional .huawei.proto.JournalMarker marker = 2;
  if (this->has_marker()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->marker_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetJournalMarkerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.GetJournalMarkerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetJournalMarkerResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetJournalMarkerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.GetJournalMarkerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.GetJournalMarkerResponse)
    MergeFrom(*source);
  }
}

void GetJournalMarkerResponse::MergeFrom(const GetJournalMarkerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.GetJournalMarkerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.has_marker()) {
    mutable_marker()->::huawei::proto::JournalMarker::MergeFrom(from.marker());
  }
}

void GetJournalMarkerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.GetJournalMarkerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetJournalMarkerResponse::CopyFrom(const GetJournalMarkerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.GetJournalMarkerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJournalMarkerResponse::IsInitialized() const {

  return true;
}

void GetJournalMarkerResponse::Swap(GetJournalMarkerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetJournalMarkerResponse::InternalSwap(GetJournalMarkerResponse* other) {
  std::swap(result_, other->result_);
  std::swap(marker_, other->marker_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetJournalMarkerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetJournalMarkerResponse_descriptor_;
  metadata.reflection = GetJournalMarkerResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetJournalMarkerResponse

// optional .huawei.proto.RESULT result = 1;
void GetJournalMarkerResponse::clear_result() {
  result_ = 0;
}
 ::huawei::proto::RESULT GetJournalMarkerResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalMarkerResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
 void GetJournalMarkerResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalMarkerResponse.result)
}

// optional .huawei.proto.JournalMarker marker = 2;
bool GetJournalMarkerResponse::has_marker() const {
  return !_is_default_instance_ && marker_ != NULL;
}
void GetJournalMarkerResponse::clear_marker() {
  if (GetArenaNoVirtual() == NULL && marker_ != NULL) delete marker_;
  marker_ = NULL;
}
const ::huawei::proto::JournalMarker& GetJournalMarkerResponse::marker() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalMarkerResponse.marker)
  return marker_ != NULL ? *marker_ : *default_instance_->marker_;
}
::huawei::proto::JournalMarker* GetJournalMarkerResponse::mutable_marker() {
  
  if (marker_ == NULL) {
    marker_ = new ::huawei::proto::JournalMarker;
  }
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalMarkerResponse.marker)
  return marker_;
}
::huawei::proto::JournalMarker* GetJournalMarkerResponse::release_marker() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetJournalMarkerResponse.marker)
  
  ::huawei::proto::JournalMarker* temp = marker_;
  marker_ = NULL;
  return temp;
}
void GetJournalMarkerResponse::set_allocated_marker(::huawei::proto::JournalMarker* marker) {
  delete marker_;
  marker_ = marker;
  if (marker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetJournalMarkerResponse.marker)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetJournalListRequest::kUuidFieldNumber;
const int GetJournalListRequest::kVolIdFieldNumber;
const int GetJournalListRequest::kTypeFieldNumber;
const int GetJournalListRequest::kMarkerFieldNumber;
const int GetJournalListRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetJournalListRequest::GetJournalListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.GetJournalListRequest)
}

void GetJournalListRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  marker_ = const_cast< ::huawei::proto::JournalMarker*>(&::huawei::proto::JournalMarker::default_instance());
}

GetJournalListRequest::GetJournalListRequest(const GetJournalListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.GetJournalListRequest)
}

void GetJournalListRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  marker_ = NULL;
  limit_ = 0;
}

GetJournalListRequest::~GetJournalListRequest() {
  // @@protoc_insertion_point(destructor:huawei.proto.GetJournalListRequest)
  SharedDtor();
}

void GetJournalListRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete marker_;
  }
}

void GetJournalListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetJournalListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetJournalListRequest_descriptor_;
}

const GetJournalListRequest& GetJournalListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_consumer_2eproto();
  return *default_instance_;
}

GetJournalListRequest* GetJournalListRequest::default_instance_ = NULL;

GetJournalListRequest* GetJournalListRequest::New(::google::protobuf::Arena* arena) const {
  GetJournalListRequest* n = new GetJournalListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetJournalListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.GetJournalListRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetJournalListRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetJournalListRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, limit_);
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && marker_ != NULL) delete marker_;
  marker_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool GetJournalListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.GetJournalListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.GetJournalListRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vol_id;
        break;
      }

      // optional string vol_id = 2;
      case 2: {
        if (tag == 18) {
         parse_vol_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vol_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vol_id().data(), this->vol_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.GetJournalListRequest.vol_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .huawei.proto.CONSUMER_TYPE type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::huawei::proto::CONSUMER_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_marker;
        break;
      }

      // optional .huawei.proto.JournalMarker marker = 4;
      case 4: {
        if (tag == 34) {
         parse_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_limit;
        break;
      }

      // optional int32 limit = 5;
      case 5: {
        if (tag == 40) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.GetJournalListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.GetJournalListRequest)
  return false;
#undef DO_
}

void GetJournalListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.GetJournalListRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetJournalListRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vol_id().data(), this->vol_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetJournalListRequest.vol_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vol_id(), output);
  }

  // optional .huawei.proto.CONSUMER_TYPE type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .huawei.proto.JournalMarker marker = 4;
  if (this->has_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->marker_, output);
  }

  // optional int32 limit = 5;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.GetJournalListRequest)
}

::google::protobuf::uint8* GetJournalListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.GetJournalListRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetJournalListRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vol_id().data(), this->vol_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetJournalListRequest.vol_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vol_id(), target);
  }

  // optional .huawei.proto.CONSUMER_TYPE type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .huawei.proto.JournalMarker marker = 4;
  if (this->has_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->marker_, target);
  }

  // optional int32 limit = 5;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.GetJournalListRequest)
  return target;
}

int GetJournalListRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.GetJournalListRequest)
  int total_size = 0;

  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vol_id());
  }

  // optional .huawei.proto.CONSUMER_TYPE type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .huawei.proto.JournalMarker marker = 4;
  if (this->has_marker()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->marker_);
  }

  // optional int32 limit = 5;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetJournalListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.GetJournalListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetJournalListRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetJournalListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.GetJournalListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.GetJournalListRequest)
    MergeFrom(*source);
  }
}

void GetJournalListRequest::MergeFrom(const GetJournalListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.GetJournalListRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.vol_id().size() > 0) {

    vol_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vol_id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_marker()) {
    mutable_marker()->::huawei::proto::JournalMarker::MergeFrom(from.marker());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void GetJournalListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.GetJournalListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetJournalListRequest::CopyFrom(const GetJournalListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.GetJournalListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJournalListRequest::IsInitialized() const {

  return true;
}

void GetJournalListRequest::Swap(GetJournalListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetJournalListRequest::InternalSwap(GetJournalListRequest* other) {
  uuid_.Swap(&other->uuid_);
  vol_id_.Swap(&other->vol_id_);
  std::swap(type_, other->type_);
  std::swap(marker_, other->marker_);
  std::swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetJournalListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetJournalListRequest_descriptor_;
  metadata.reflection = GetJournalListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetJournalListRequest

// optional string uuid = 1;
void GetJournalListRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetJournalListRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetJournalListRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalListRequest.uuid)
}
 void GetJournalListRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetJournalListRequest.uuid)
}
 void GetJournalListRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetJournalListRequest.uuid)
}
 ::std::string* GetJournalListRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalListRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetJournalListRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetJournalListRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetJournalListRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetJournalListRequest.uuid)
}

// optional string vol_id = 2;
void GetJournalListRequest::clear_vol_id() {
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetJournalListRequest::vol_id() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListRequest.vol_id)
  return vol_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetJournalListRequest::set_vol_id(const ::std::string& value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalListRequest.vol_id)
}
 void GetJournalListRequest::set_vol_id(const char* value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetJournalListRequest.vol_id)
}
 void GetJournalListRequest::set_vol_id(const char* value, size_t size) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetJournalListRequest.vol_id)
}
 ::std::string* GetJournalListRequest::mutable_vol_id() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalListRequest.vol_id)
  return vol_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetJournalListRequest::release_vol_id() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetJournalListRequest.vol_id)
  
  return vol_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetJournalListRequest::set_allocated_vol_id(::std::string* vol_id) {
  if (vol_id != NULL) {
    
  } else {
    
  }
  vol_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vol_id);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetJournalListRequest.vol_id)
}

// optional .huawei.proto.CONSUMER_TYPE type = 3;
void GetJournalListRequest::clear_type() {
  type_ = 0;
}
 ::huawei::proto::CONSUMER_TYPE GetJournalListRequest::type() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListRequest.type)
  return static_cast< ::huawei::proto::CONSUMER_TYPE >(type_);
}
 void GetJournalListRequest::set_type(::huawei::proto::CONSUMER_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalListRequest.type)
}

// optional .huawei.proto.JournalMarker marker = 4;
bool GetJournalListRequest::has_marker() const {
  return !_is_default_instance_ && marker_ != NULL;
}
void GetJournalListRequest::clear_marker() {
  if (GetArenaNoVirtual() == NULL && marker_ != NULL) delete marker_;
  marker_ = NULL;
}
const ::huawei::proto::JournalMarker& GetJournalListRequest::marker() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListRequest.marker)
  return marker_ != NULL ? *marker_ : *default_instance_->marker_;
}
::huawei::proto::JournalMarker* GetJournalListRequest::mutable_marker() {
  
  if (marker_ == NULL) {
    marker_ = new ::huawei::proto::JournalMarker;
  }
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalListRequest.marker)
  return marker_;
}
::huawei::proto::JournalMarker* GetJournalListRequest::release_marker() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetJournalListRequest.marker)
  
  ::huawei::proto::JournalMarker* temp = marker_;
  marker_ = NULL;
  return temp;
}
void GetJournalListRequest::set_allocated_marker(::huawei::proto::JournalMarker* marker) {
  delete marker_;
  marker_ = marker;
  if (marker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetJournalListRequest.marker)
}

// optional int32 limit = 5;
void GetJournalListRequest::clear_limit() {
  limit_ = 0;
}
 ::google::protobuf::int32 GetJournalListRequest::limit() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListRequest.limit)
  return limit_;
}
 void GetJournalListRequest::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalListRequest.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetJournalListResponse::kResultFieldNumber;
const int GetJournalListResponse::kJournalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetJournalListResponse::GetJournalListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.GetJournalListResponse)
}

void GetJournalListResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetJournalListResponse::GetJournalListResponse(const GetJournalListResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.GetJournalListResponse)
}

void GetJournalListResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
}

GetJournalListResponse::~GetJournalListResponse() {
  // @@protoc_insertion_point(destructor:huawei.proto.GetJournalListResponse)
  SharedDtor();
}

void GetJournalListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetJournalListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetJournalListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetJournalListResponse_descriptor_;
}

const GetJournalListResponse& GetJournalListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_consumer_2eproto();
  return *default_instance_;
}

GetJournalListResponse* GetJournalListResponse::default_instance_ = NULL;

GetJournalListResponse* GetJournalListResponse::New(::google::protobuf::Arena* arena) const {
  GetJournalListResponse* n = new GetJournalListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetJournalListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.GetJournalListResponse)
  result_ = 0;
  journals_.Clear();
}

bool GetJournalListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.GetJournalListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .huawei.proto.RESULT result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::huawei::proto::RESULT >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_journals;
        break;
      }

      // repeated string journals = 2;
      case 2: {
        if (tag == 18) {
         parse_journals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_journals()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->journals(this->journals_size() - 1).data(),
            this->journals(this->journals_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.GetJournalListResponse.journals"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_journals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.GetJournalListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.GetJournalListResponse)
  return false;
#undef DO_
}

void GetJournalListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.GetJournalListResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated string journals = 2;
  for (int i = 0; i < this->journals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->journals(i).data(), this->journals(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetJournalListResponse.journals");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->journals(i), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.GetJournalListResponse)
}

::google::protobuf::uint8* GetJournalListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.GetJournalListResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated string journals = 2;
  for (int i = 0; i < this->journals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->journals(i).data(), this->journals(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetJournalListResponse.journals");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->journals(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.GetJournalListResponse)
  return target;
}

int GetJournalListResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.GetJournalListResponse)
  int total_size = 0;

  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated string journals = 2;
  total_size += 1 * this->journals_size();
  for (int i = 0; i < this->journals_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->journals(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetJournalListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.GetJournalListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetJournalListResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetJournalListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.GetJournalListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.GetJournalListResponse)
    MergeFrom(*source);
  }
}

void GetJournalListResponse::MergeFrom(const GetJournalListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.GetJournalListResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  journals_.MergeFrom(from.journals_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void GetJournalListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.GetJournalListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetJournalListResponse::CopyFrom(const GetJournalListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.GetJournalListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJournalListResponse::IsInitialized() const {

  return true;
}

void GetJournalListResponse::Swap(GetJournalListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetJournalListResponse::InternalSwap(GetJournalListResponse* other) {
  std::swap(result_, other->result_);
  journals_.UnsafeArenaSwap(&other->journals_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetJournalListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetJournalListResponse_descriptor_;
  metadata.reflection = GetJournalListResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetJournalListResponse

// optional .huawei.proto.RESULT result = 1;
void GetJournalListResponse::clear_result() {
  result_ = 0;
}
 ::huawei::proto::RESULT GetJournalListResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
 void GetJournalListResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalListResponse.result)
}

// repeated string journals = 2;
int GetJournalListResponse::journals_size() const {
  return journals_.size();
}
void GetJournalListResponse::clear_journals() {
  journals_.Clear();
}
 const ::std::string& GetJournalListResponse::journals(int index) const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetJournalListResponse.journals)
  return journals_.Get(index);
}
 ::std::string* GetJournalListResponse::mutable_journals(int index) {
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetJournalListResponse.journals)
  return journals_.Mutable(index);
}
 void GetJournalListResponse::set_journals(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:huawei.proto.GetJournalListResponse.journals)
  journals_.Mutable(index)->assign(value);
}
 void GetJournalListResponse::set_journals(int index, const char* value) {
  journals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetJournalListResponse.journals)
}
 void GetJournalListResponse::set_journals(int index, const char* value, size_t size) {
  journals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetJournalListResponse.journals)
}
 ::std::string* GetJournalListResponse::add_journals() {
  // @@protoc_insertion_point(field_add_mutable:huawei.proto.GetJournalListResponse.journals)
  return journals_.Add();
}
 void GetJournalListResponse::add_journals(const ::std::string& value) {
  journals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:huawei.proto.GetJournalListResponse.journals)
}
 void GetJournalListResponse::add_journals(const char* value) {
  journals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:huawei.proto.GetJournalListResponse.journals)
}
 void GetJournalListResponse::add_journals(const char* value, size_t size) {
  journals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:huawei.proto.GetJournalListResponse.journals)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetJournalListResponse::journals() const {
  // @@protoc_insertion_point(field_list:huawei.proto.GetJournalListResponse.journals)
  return journals_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GetJournalListResponse::mutable_journals() {
  // @@protoc_insertion_point(field_mutable_list:huawei.proto.GetJournalListResponse.journals)
  return &journals_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateConsumerMarkerRequest::kUuidFieldNumber;
const int UpdateConsumerMarkerRequest::kVolIdFieldNumber;
const int UpdateConsumerMarkerRequest::kTypeFieldNumber;
const int UpdateConsumerMarkerRequest::kMarkerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateConsumerMarkerRequest::UpdateConsumerMarkerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.UpdateConsumerMarkerRequest)
}

void UpdateConsumerMarkerRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  marker_ = const_cast< ::huawei::proto::JournalMarker*>(&::huawei::proto::JournalMarker::default_instance());
}

UpdateConsumerMarkerRequest::UpdateConsumerMarkerRequest(const UpdateConsumerMarkerRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.UpdateConsumerMarkerRequest)
}

void UpdateConsumerMarkerRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  marker_ = NULL;
}

UpdateConsumerMarkerRequest::~UpdateConsumerMarkerRequest() {
  // @@protoc_insertion_point(destructor:huawei.proto.UpdateConsumerMarkerRequest)
  SharedDtor();
}

void UpdateConsumerMarkerRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete marker_;
  }
}

void UpdateConsumerMarkerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateConsumerMarkerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateConsumerMarkerRequest_descriptor_;
}

const UpdateConsumerMarkerRequest& UpdateConsumerMarkerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_consumer_2eproto();
  return *default_instance_;
}

UpdateConsumerMarkerRequest* UpdateConsumerMarkerRequest::default_instance_ = NULL;

UpdateConsumerMarkerRequest* UpdateConsumerMarkerRequest::New(::google::protobuf::Arena* arena) const {
  UpdateConsumerMarkerRequest* n = new UpdateConsumerMarkerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateConsumerMarkerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.UpdateConsumerMarkerRequest)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && marker_ != NULL) delete marker_;
  marker_ = NULL;
}

bool UpdateConsumerMarkerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.UpdateConsumerMarkerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.UpdateConsumerMarkerRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vol_id;
        break;
      }

      // optional string vol_id = 2;
      case 2: {
        if (tag == 18) {
         parse_vol_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vol_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vol_id().data(), this->vol_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.UpdateConsumerMarkerRequest.vol_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .huawei.proto.CONSUMER_TYPE type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::huawei::proto::CONSUMER_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_marker;
        break;
      }

      // optional .huawei.proto.JournalMarker marker = 4;
      case 4: {
        if (tag == 34) {
         parse_marker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.UpdateConsumerMarkerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.UpdateConsumerMarkerRequest)
  return false;
#undef DO_
}

void UpdateConsumerMarkerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.UpdateConsumerMarkerRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.UpdateConsumerMarkerRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vol_id().data(), this->vol_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.UpdateConsumerMarkerRequest.vol_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vol_id(), output);
  }

  // optional .huawei.proto.CONSUMER_TYPE type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .huawei.proto.JournalMarker marker = 4;
  if (this->has_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->marker_, output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.UpdateConsumerMarkerRequest)
}

::google::protobuf::uint8* UpdateConsumerMarkerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.UpdateConsumerMarkerRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.UpdateConsumerMarkerRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vol_id().data(), this->vol_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.UpdateConsumerMarkerRequest.vol_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vol_id(), target);
  }

  // optional .huawei.proto.CONSUMER_TYPE type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .huawei.proto.JournalMarker marker = 4;
  if (this->has_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->marker_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.UpdateConsumerMarkerRequest)
  return target;
}

int UpdateConsumerMarkerRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.UpdateConsumerMarkerRequest)
  int total_size = 0;

  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vol_id());
  }

  // optional .huawei.proto.CONSUMER_TYPE type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .huawei.proto.JournalMarker marker = 4;
  if (this->has_marker()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->marker_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateConsumerMarkerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.UpdateConsumerMarkerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateConsumerMarkerRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateConsumerMarkerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.UpdateConsumerMarkerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.UpdateConsumerMarkerRequest)
    MergeFrom(*source);
  }
}

void UpdateConsumerMarkerRequest::MergeFrom(const UpdateConsumerMarkerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.UpdateConsumerMarkerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.vol_id().size() > 0) {

    vol_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vol_id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_marker()) {
    mutable_marker()->::huawei::proto::JournalMarker::MergeFrom(from.marker());
  }
}

void UpdateConsumerMarkerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.UpdateConsumerMarkerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateConsumerMarkerRequest::CopyFrom(const UpdateConsumerMarkerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.UpdateConsumerMarkerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConsumerMarkerRequest::IsInitialized() const {

  return true;
}

void UpdateConsumerMarkerRequest::Swap(UpdateConsumerMarkerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateConsumerMarkerRequest::InternalSwap(UpdateConsumerMarkerRequest* other) {
  uuid_.Swap(&other->uuid_);
  vol_id_.Swap(&other->vol_id_);
  std::swap(type_, other->type_);
  std::swap(marker_, other->marker_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateConsumerMarkerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateConsumerMarkerRequest_descriptor_;
  metadata.reflection = UpdateConsumerMarkerRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateConsumerMarkerRequest

// optional string uuid = 1;
void UpdateConsumerMarkerRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpdateConsumerMarkerRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.UpdateConsumerMarkerRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateConsumerMarkerRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.UpdateConsumerMarkerRequest.uuid)
}
 void UpdateConsumerMarkerRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.UpdateConsumerMarkerRequest.uuid)
}
 void UpdateConsumerMarkerRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.UpdateConsumerMarkerRequest.uuid)
}
 ::std::string* UpdateConsumerMarkerRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.UpdateConsumerMarkerRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpdateConsumerMarkerRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.UpdateConsumerMarkerRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateConsumerMarkerRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.UpdateConsumerMarkerRequest.uuid)
}

// optional string vol_id = 2;
void UpdateConsumerMarkerRequest::clear_vol_id() {
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UpdateConsumerMarkerRequest::vol_id() const {
  // @@protoc_insertion_point(field_get:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
  return vol_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateConsumerMarkerRequest::set_vol_id(const ::std::string& value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
}
 void UpdateConsumerMarkerRequest::set_vol_id(const char* value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
}
 void UpdateConsumerMarkerRequest::set_vol_id(const char* value, size_t size) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
}
 ::std::string* UpdateConsumerMarkerRequest::mutable_vol_id() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
  return vol_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpdateConsumerMarkerRequest::release_vol_id() {
  // @@protoc_insertion_point(field_release:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
  
  return vol_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpdateConsumerMarkerRequest::set_allocated_vol_id(::std::string* vol_id) {
  if (vol_id != NULL) {
    
  } else {
    
  }
  vol_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vol_id);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.UpdateConsumerMarkerRequest.vol_id)
}

// optional .huawei.proto.CONSUMER_TYPE type = 3;
void UpdateConsumerMarkerRequest::clear_type() {
  type_ = 0;
}
 ::huawei::proto::CONSUMER_TYPE UpdateConsumerMarkerRequest::type() const {
  // @@protoc_insertion_point(field_get:huawei.proto.UpdateConsumerMarkerRequest.type)
  return static_cast< ::huawei::proto::CONSUMER_TYPE >(type_);
}
 void UpdateConsumerMarkerRequest::set_type(::huawei::proto::CONSUMER_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.UpdateConsumerMarkerRequest.type)
}

// optional .huawei.proto.JournalMarker marker = 4;
bool UpdateConsumerMarkerRequest::has_marker() const {
  return !_is_default_instance_ && marker_ != NULL;
}
void UpdateConsumerMarkerRequest::clear_marker() {
  if (GetArenaNoVirtual() == NULL && marker_ != NULL) delete marker_;
  marker_ = NULL;
}
const ::huawei::proto::JournalMarker& UpdateConsumerMarkerRequest::marker() const {
  // @@protoc_insertion_point(field_get:huawei.proto.UpdateConsumerMarkerRequest.marker)
  return marker_ != NULL ? *marker_ : *default_instance_->marker_;
}
::huawei::proto::JournalMarker* UpdateConsumerMarkerRequest::mutable_marker() {
  
  if (marker_ == NULL) {
    marker_ = new ::huawei::proto::JournalMarker;
  }
  // @@protoc_insertion_point(field_mutable:huawei.proto.UpdateConsumerMarkerRequest.marker)
  return marker_;
}
::huawei::proto::JournalMarker* UpdateConsumerMarkerRequest::release_marker() {
  // @@protoc_insertion_point(field_release:huawei.proto.UpdateConsumerMarkerRequest.marker)
  
  ::huawei::proto::JournalMarker* temp = marker_;
  marker_ = NULL;
  return temp;
}
void UpdateConsumerMarkerRequest::set_allocated_marker(::huawei::proto::JournalMarker* marker) {
  delete marker_;
  marker_ = marker;
  if (marker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.UpdateConsumerMarkerRequest.marker)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateConsumerMarkerResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateConsumerMarkerResponse::UpdateConsumerMarkerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.UpdateConsumerMarkerResponse)
}

void UpdateConsumerMarkerResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UpdateConsumerMarkerResponse::UpdateConsumerMarkerResponse(const UpdateConsumerMarkerResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.UpdateConsumerMarkerResponse)
}

void UpdateConsumerMarkerResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
}

UpdateConsumerMarkerResponse::~UpdateConsumerMarkerResponse() {
  // @@protoc_insertion_point(destructor:huawei.proto.UpdateConsumerMarkerResponse)
  SharedDtor();
}

void UpdateConsumerMarkerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateConsumerMarkerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateConsumerMarkerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateConsumerMarkerResponse_descriptor_;
}

const UpdateConsumerMarkerResponse& UpdateConsumerMarkerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_consumer_2eproto();
  return *default_instance_;
}

UpdateConsumerMarkerResponse* UpdateConsumerMarkerResponse::default_instance_ = NULL;

UpdateConsumerMarkerResponse* UpdateConsumerMarkerResponse::New(::google::protobuf::Arena* arena) const {
  UpdateConsumerMarkerResponse* n = new UpdateConsumerMarkerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateConsumerMarkerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.UpdateConsumerMarkerResponse)
  result_ = 0;
}

bool UpdateConsumerMarkerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.UpdateConsumerMarkerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .huawei.proto.RESULT result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::huawei::proto::RESULT >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.UpdateConsumerMarkerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.UpdateConsumerMarkerResponse)
  return false;
#undef DO_
}

void UpdateConsumerMarkerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.UpdateConsumerMarkerResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.UpdateConsumerMarkerResponse)
}

::google::protobuf::uint8* UpdateConsumerMarkerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.UpdateConsumerMarkerResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.UpdateConsumerMarkerResponse)
  return target;
}

int UpdateConsumerMarkerResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.UpdateConsumerMarkerResponse)
  int total_size = 0;

  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateConsumerMarkerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.UpdateConsumerMarkerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateConsumerMarkerResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateConsumerMarkerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.UpdateConsumerMarkerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.UpdateConsumerMarkerResponse)
    MergeFrom(*source);
  }
}

void UpdateConsumerMarkerResponse::MergeFrom(const UpdateConsumerMarkerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.UpdateConsumerMarkerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void UpdateConsumerMarkerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.UpdateConsumerMarkerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateConsumerMarkerResponse::CopyFrom(const UpdateConsumerMarkerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.UpdateConsumerMarkerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConsumerMarkerResponse::IsInitialized() const {

  return true;
}

void UpdateConsumerMarkerResponse::Swap(UpdateConsumerMarkerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateConsumerMarkerResponse::InternalSwap(UpdateConsumerMarkerResponse* other) {
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateConsumerMarkerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateConsumerMarkerResponse_descriptor_;
  metadata.reflection = UpdateConsumerMarkerResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateConsumerMarkerResponse

// optional .huawei.proto.RESULT result = 1;
void UpdateConsumerMarkerResponse::clear_result() {
  result_ = 0;
}
 ::huawei::proto::RESULT UpdateConsumerMarkerResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.UpdateConsumerMarkerResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
 void UpdateConsumerMarkerResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.UpdateConsumerMarkerResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace huawei

// @@protoc_insertion_point(global_scope)
