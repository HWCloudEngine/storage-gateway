// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: writer.proto

#include "writer.pb.h"
#include "writer.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace huawei {
namespace proto {

static const char* Writer_method_names[] = {
  "/huawei.proto.Writer/GetWriteableJournals",
  "/huawei.proto.Writer/SealJournals",
  "/huawei.proto.Writer/GetMultiWriteableJournals",
  "/huawei.proto.Writer/SealMultiJournals",
};

std::unique_ptr< Writer::Stub> Writer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Writer::Stub> stub(new Writer::Stub(channel));
  return stub;
}

Writer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetWriteableJournals_(Writer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SealJournals_(Writer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMultiWriteableJournals_(Writer_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SealMultiJournals_(Writer_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Writer::Stub::GetWriteableJournals(::grpc::ClientContext* context, const ::huawei::proto::GetWriteableJournalsRequest& request, ::huawei::proto::GetWriteableJournalsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetWriteableJournals_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::huawei::proto::GetWriteableJournalsResponse>* Writer::Stub::AsyncGetWriteableJournalsRaw(::grpc::ClientContext* context, const ::huawei::proto::GetWriteableJournalsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetWriteableJournalsResponse>(channel_.get(), cq, rpcmethod_GetWriteableJournals_, context, request);
}

::grpc::Status Writer::Stub::SealJournals(::grpc::ClientContext* context, const ::huawei::proto::SealJournalsRequest& request, ::huawei::proto::SealJournalsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SealJournals_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::huawei::proto::SealJournalsResponse>* Writer::Stub::AsyncSealJournalsRaw(::grpc::ClientContext* context, const ::huawei::proto::SealJournalsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::huawei::proto::SealJournalsResponse>(channel_.get(), cq, rpcmethod_SealJournals_, context, request);
}

::grpc::Status Writer::Stub::GetMultiWriteableJournals(::grpc::ClientContext* context, const ::huawei::proto::GetMultiWriteableJournalsRequest& request, ::huawei::proto::GetMultiWriteableJournalsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetMultiWriteableJournals_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::huawei::proto::GetMultiWriteableJournalsResponse>* Writer::Stub::AsyncGetMultiWriteableJournalsRaw(::grpc::ClientContext* context, const ::huawei::proto::GetMultiWriteableJournalsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetMultiWriteableJournalsResponse>(channel_.get(), cq, rpcmethod_GetMultiWriteableJournals_, context, request);
}

::grpc::Status Writer::Stub::SealMultiJournals(::grpc::ClientContext* context, const ::huawei::proto::SealMultiJournalsRequest& request, ::huawei::proto::SealMultiJournalsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SealMultiJournals_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::huawei::proto::SealMultiJournalsResponse>* Writer::Stub::AsyncSealMultiJournalsRaw(::grpc::ClientContext* context, const ::huawei::proto::SealMultiJournalsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::huawei::proto::SealMultiJournalsResponse>(channel_.get(), cq, rpcmethod_SealMultiJournals_, context, request);
}

Writer::Service::Service() {
  (void)Writer_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Writer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Writer::Service, ::huawei::proto::GetWriteableJournalsRequest, ::huawei::proto::GetWriteableJournalsResponse>(
          std::mem_fn(&Writer::Service::GetWriteableJournals), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Writer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Writer::Service, ::huawei::proto::SealJournalsRequest, ::huawei::proto::SealJournalsResponse>(
          std::mem_fn(&Writer::Service::SealJournals), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Writer_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Writer::Service, ::huawei::proto::GetMultiWriteableJournalsRequest, ::huawei::proto::GetMultiWriteableJournalsResponse>(
          std::mem_fn(&Writer::Service::GetMultiWriteableJournals), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Writer_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Writer::Service, ::huawei::proto::SealMultiJournalsRequest, ::huawei::proto::SealMultiJournalsResponse>(
          std::mem_fn(&Writer::Service::SealMultiJournals), this)));
}

Writer::Service::~Service() {
}

::grpc::Status Writer::Service::GetWriteableJournals(::grpc::ServerContext* context, const ::huawei::proto::GetWriteableJournalsRequest* request, ::huawei::proto::GetWriteableJournalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Writer::Service::SealJournals(::grpc::ServerContext* context, const ::huawei::proto::SealJournalsRequest* request, ::huawei::proto::SealJournalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Writer::Service::GetMultiWriteableJournals(::grpc::ServerContext* context, const ::huawei::proto::GetMultiWriteableJournalsRequest* request, ::huawei::proto::GetMultiWriteableJournalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Writer::Service::SealMultiJournals(::grpc::ServerContext* context, const ::huawei::proto::SealMultiJournalsRequest* request, ::huawei::proto::SealMultiJournalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace huawei
}  // namespace proto

