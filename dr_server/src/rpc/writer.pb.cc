// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: writer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "writer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace huawei {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* GetWriteableJournalsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetWriteableJournalsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetWriteableJournalsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetWriteableJournalsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SealJournalsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SealJournalsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SealJournalsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SealJournalsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMultiWriteableJournalsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMultiWriteableJournalsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* JournalArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JournalArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMultiWriteableJournalsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMultiWriteableJournalsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMultiWriteableJournalsResponse_MapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SealMultiJournalsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SealMultiJournalsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SealMultiJournalsRequest_MapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SealMultiJournalsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SealMultiJournalsResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_writer_2eproto() {
  protobuf_AddDesc_writer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "writer.proto");
  GOOGLE_CHECK(file != NULL);
  GetWriteableJournalsRequest_descriptor_ = file->message_type(0);
  static const int GetWriteableJournalsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWriteableJournalsRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWriteableJournalsRequest, vol_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWriteableJournalsRequest, limits_),
  };
  GetWriteableJournalsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetWriteableJournalsRequest_descriptor_,
      GetWriteableJournalsRequest::default_instance_,
      GetWriteableJournalsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetWriteableJournalsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWriteableJournalsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWriteableJournalsRequest, _is_default_instance_));
  GetWriteableJournalsResponse_descriptor_ = file->message_type(1);
  static const int GetWriteableJournalsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWriteableJournalsResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWriteableJournalsResponse, journals_),
  };
  GetWriteableJournalsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetWriteableJournalsResponse_descriptor_,
      GetWriteableJournalsResponse::default_instance_,
      GetWriteableJournalsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetWriteableJournalsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWriteableJournalsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetWriteableJournalsResponse, _is_default_instance_));
  SealJournalsRequest_descriptor_ = file->message_type(2);
  static const int SealJournalsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealJournalsRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealJournalsRequest, vol_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealJournalsRequest, journals_),
  };
  SealJournalsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SealJournalsRequest_descriptor_,
      SealJournalsRequest::default_instance_,
      SealJournalsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SealJournalsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealJournalsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealJournalsRequest, _is_default_instance_));
  SealJournalsResponse_descriptor_ = file->message_type(3);
  static const int SealJournalsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealJournalsResponse, result_),
  };
  SealJournalsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SealJournalsResponse_descriptor_,
      SealJournalsResponse::default_instance_,
      SealJournalsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SealJournalsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealJournalsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealJournalsResponse, _is_default_instance_));
  GetMultiWriteableJournalsRequest_descriptor_ = file->message_type(4);
  static const int GetMultiWriteableJournalsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiWriteableJournalsRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiWriteableJournalsRequest, vol_id_),
  };
  GetMultiWriteableJournalsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetMultiWriteableJournalsRequest_descriptor_,
      GetMultiWriteableJournalsRequest::default_instance_,
      GetMultiWriteableJournalsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetMultiWriteableJournalsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiWriteableJournalsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiWriteableJournalsRequest, _is_default_instance_));
  JournalArray_descriptor_ = file->message_type(5);
  static const int JournalArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalArray, journal_),
  };
  JournalArray_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JournalArray_descriptor_,
      JournalArray::default_instance_,
      JournalArray_offsets_,
      -1,
      -1,
      -1,
      sizeof(JournalArray),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalArray, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalArray, _is_default_instance_));
  GetMultiWriteableJournalsResponse_descriptor_ = file->message_type(6);
  static const int GetMultiWriteableJournalsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiWriteableJournalsResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiWriteableJournalsResponse, map_),
  };
  GetMultiWriteableJournalsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetMultiWriteableJournalsResponse_descriptor_,
      GetMultiWriteableJournalsResponse::default_instance_,
      GetMultiWriteableJournalsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetMultiWriteableJournalsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiWriteableJournalsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMultiWriteableJournalsResponse, _is_default_instance_));
  GetMultiWriteableJournalsResponse_MapEntry_descriptor_ = GetMultiWriteableJournalsResponse_descriptor_->nested_type(0);
  SealMultiJournalsRequest_descriptor_ = file->message_type(7);
  static const int SealMultiJournalsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealMultiJournalsRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealMultiJournalsRequest, map_),
  };
  SealMultiJournalsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SealMultiJournalsRequest_descriptor_,
      SealMultiJournalsRequest::default_instance_,
      SealMultiJournalsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SealMultiJournalsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealMultiJournalsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealMultiJournalsRequest, _is_default_instance_));
  SealMultiJournalsRequest_MapEntry_descriptor_ = SealMultiJournalsRequest_descriptor_->nested_type(0);
  SealMultiJournalsResponse_descriptor_ = file->message_type(8);
  static const int SealMultiJournalsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealMultiJournalsResponse, result_),
  };
  SealMultiJournalsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SealMultiJournalsResponse_descriptor_,
      SealMultiJournalsResponse::default_instance_,
      SealMultiJournalsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SealMultiJournalsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealMultiJournalsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealMultiJournalsResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_writer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetWriteableJournalsRequest_descriptor_, &GetWriteableJournalsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetWriteableJournalsResponse_descriptor_, &GetWriteableJournalsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SealJournalsRequest_descriptor_, &SealJournalsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SealJournalsResponse_descriptor_, &SealJournalsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMultiWriteableJournalsRequest_descriptor_, &GetMultiWriteableJournalsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JournalArray_descriptor_, &JournalArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMultiWriteableJournalsResponse_descriptor_, &GetMultiWriteableJournalsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GetMultiWriteableJournalsResponse_MapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::huawei::proto::JournalArray,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GetMultiWriteableJournalsResponse_MapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SealMultiJournalsRequest_descriptor_, &SealMultiJournalsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        SealMultiJournalsRequest_MapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::huawei::proto::JournalArray,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                SealMultiJournalsRequest_MapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SealMultiJournalsResponse_descriptor_, &SealMultiJournalsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_writer_2eproto() {
  delete GetWriteableJournalsRequest::default_instance_;
  delete GetWriteableJournalsRequest_reflection_;
  delete GetWriteableJournalsResponse::default_instance_;
  delete GetWriteableJournalsResponse_reflection_;
  delete SealJournalsRequest::default_instance_;
  delete SealJournalsRequest_reflection_;
  delete SealJournalsResponse::default_instance_;
  delete SealJournalsResponse_reflection_;
  delete GetMultiWriteableJournalsRequest::default_instance_;
  delete GetMultiWriteableJournalsRequest_reflection_;
  delete JournalArray::default_instance_;
  delete JournalArray_reflection_;
  delete GetMultiWriteableJournalsResponse::default_instance_;
  delete GetMultiWriteableJournalsResponse_reflection_;
  delete SealMultiJournalsRequest::default_instance_;
  delete SealMultiJournalsRequest_reflection_;
  delete SealMultiJournalsResponse::default_instance_;
  delete SealMultiJournalsResponse_reflection_;
}

void protobuf_AddDesc_writer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::huawei::proto::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014writer.proto\022\014huawei.proto\032\014common.pro"
    "to\"K\n\033GetWriteableJournalsRequest\022\014\n\004uui"
    "d\030\001 \001(\t\022\016\n\006vol_id\030\002 \001(\t\022\016\n\006limits\030\003 \001(\005\""
    "V\n\034GetWriteableJournalsResponse\022$\n\006resul"
    "t\030\001 \001(\0162\024.huawei.proto.RESULT\022\020\n\010journal"
    "s\030\002 \003(\t\"E\n\023SealJournalsRequest\022\014\n\004uuid\030\001"
    " \001(\t\022\016\n\006vol_id\030\002 \001(\t\022\020\n\010journals\030\003 \003(\t\"<"
    "\n\024SealJournalsResponse\022$\n\006result\030\001 \001(\0162\024"
    ".huawei.proto.RESULT\"@\n GetMultiWriteabl"
    "eJournalsRequest\022\014\n\004uuid\030\001 \001(\t\022\016\n\006vol_id"
    "\030\002 \003(\t\"\037\n\014JournalArray\022\017\n\007journal\030\001 \003(\t\""
    "\330\001\n!GetMultiWriteableJournalsResponse\022$\n"
    "\006result\030\001 \001(\0162\024.huawei.proto.RESULT\022E\n\003m"
    "ap\030\002 \003(\01328.huawei.proto.GetMultiWriteabl"
    "eJournalsResponse.MapEntry\032F\n\010MapEntry\022\013"
    "\n\003key\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.huawei.prot"
    "o.JournalArray:\0028\001\"\256\001\n\030SealMultiJournals"
    "Request\022\014\n\004uuid\030\001 \001(\t\022<\n\003map\030\002 \003(\0132/.hua"
    "wei.proto.SealMultiJournalsRequest.MapEn"
    "try\032F\n\010MapEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 "
    "\001(\0132\032.huawei.proto.JournalArray:\0028\001\"A\n\031S"
    "ealMultiJournalsResponse\022$\n\006result\030\001 \001(\016"
    "2\024.huawei.proto.RESULT2\272\003\n\006Writer\022o\n\024Get"
    "WriteableJournals\022).huawei.proto.GetWrit"
    "eableJournalsRequest\032*.huawei.proto.GetW"
    "riteableJournalsResponse\"\000\022W\n\014SealJourna"
    "ls\022!.huawei.proto.SealJournalsRequest\032\"."
    "huawei.proto.SealJournalsResponse\"\000\022~\n\031G"
    "etMultiWriteableJournals\022..huawei.proto."
    "GetMultiWriteableJournalsRequest\032/.huawe"
    "i.proto.GetMultiWriteableJournalsRespons"
    "e\"\000\022f\n\021SealMultiJournals\022&.huawei.proto."
    "SealMultiJournalsRequest\032\'.huawei.proto."
    "SealMultiJournalsResponse\"\000B\006\242\002\003DRSb\006pro"
    "to3", 1363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "writer.proto", &protobuf_RegisterTypes);
  GetWriteableJournalsRequest::default_instance_ = new GetWriteableJournalsRequest();
  GetWriteableJournalsResponse::default_instance_ = new GetWriteableJournalsResponse();
  SealJournalsRequest::default_instance_ = new SealJournalsRequest();
  SealJournalsResponse::default_instance_ = new SealJournalsResponse();
  GetMultiWriteableJournalsRequest::default_instance_ = new GetMultiWriteableJournalsRequest();
  JournalArray::default_instance_ = new JournalArray();
  GetMultiWriteableJournalsResponse::default_instance_ = new GetMultiWriteableJournalsResponse();
  SealMultiJournalsRequest::default_instance_ = new SealMultiJournalsRequest();
  SealMultiJournalsResponse::default_instance_ = new SealMultiJournalsResponse();
  GetWriteableJournalsRequest::default_instance_->InitAsDefaultInstance();
  GetWriteableJournalsResponse::default_instance_->InitAsDefaultInstance();
  SealJournalsRequest::default_instance_->InitAsDefaultInstance();
  SealJournalsResponse::default_instance_->InitAsDefaultInstance();
  GetMultiWriteableJournalsRequest::default_instance_->InitAsDefaultInstance();
  JournalArray::default_instance_->InitAsDefaultInstance();
  GetMultiWriteableJournalsResponse::default_instance_->InitAsDefaultInstance();
  SealMultiJournalsRequest::default_instance_->InitAsDefaultInstance();
  SealMultiJournalsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_writer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_writer_2eproto {
  StaticDescriptorInitializer_writer_2eproto() {
    protobuf_AddDesc_writer_2eproto();
  }
} static_descriptor_initializer_writer_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWriteableJournalsRequest::kUuidFieldNumber;
const int GetWriteableJournalsRequest::kVolIdFieldNumber;
const int GetWriteableJournalsRequest::kLimitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWriteableJournalsRequest::GetWriteableJournalsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.GetWriteableJournalsRequest)
}

void GetWriteableJournalsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetWriteableJournalsRequest::GetWriteableJournalsRequest(const GetWriteableJournalsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.GetWriteableJournalsRequest)
}

void GetWriteableJournalsRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limits_ = 0;
}

GetWriteableJournalsRequest::~GetWriteableJournalsRequest() {
  // @@protoc_insertion_point(destructor:huawei.proto.GetWriteableJournalsRequest)
  SharedDtor();
}

void GetWriteableJournalsRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetWriteableJournalsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWriteableJournalsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetWriteableJournalsRequest_descriptor_;
}

const GetWriteableJournalsRequest& GetWriteableJournalsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_writer_2eproto();
  return *default_instance_;
}

GetWriteableJournalsRequest* GetWriteableJournalsRequest::default_instance_ = NULL;

GetWriteableJournalsRequest* GetWriteableJournalsRequest::New(::google::protobuf::Arena* arena) const {
  GetWriteableJournalsRequest* n = new GetWriteableJournalsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetWriteableJournalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.GetWriteableJournalsRequest)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limits_ = 0;
}

bool GetWriteableJournalsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.GetWriteableJournalsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.GetWriteableJournalsRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vol_id;
        break;
      }

      // optional string vol_id = 2;
      case 2: {
        if (tag == 18) {
         parse_vol_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vol_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vol_id().data(), this->vol_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.GetWriteableJournalsRequest.vol_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limits;
        break;
      }

      // optional int32 limits = 3;
      case 3: {
        if (tag == 24) {
         parse_limits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.GetWriteableJournalsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.GetWriteableJournalsRequest)
  return false;
#undef DO_
}

void GetWriteableJournalsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.GetWriteableJournalsRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetWriteableJournalsRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vol_id().data(), this->vol_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetWriteableJournalsRequest.vol_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vol_id(), output);
  }

  // optional int32 limits = 3;
  if (this->limits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limits(), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.GetWriteableJournalsRequest)
}

::google::protobuf::uint8* GetWriteableJournalsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.GetWriteableJournalsRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetWriteableJournalsRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vol_id().data(), this->vol_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetWriteableJournalsRequest.vol_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vol_id(), target);
  }

  // optional int32 limits = 3;
  if (this->limits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limits(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.GetWriteableJournalsRequest)
  return target;
}

int GetWriteableJournalsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.GetWriteableJournalsRequest)
  int total_size = 0;

  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vol_id());
  }

  // optional int32 limits = 3;
  if (this->limits() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limits());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWriteableJournalsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.GetWriteableJournalsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetWriteableJournalsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWriteableJournalsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.GetWriteableJournalsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.GetWriteableJournalsRequest)
    MergeFrom(*source);
  }
}

void GetWriteableJournalsRequest::MergeFrom(const GetWriteableJournalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.GetWriteableJournalsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.vol_id().size() > 0) {

    vol_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vol_id_);
  }
  if (from.limits() != 0) {
    set_limits(from.limits());
  }
}

void GetWriteableJournalsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.GetWriteableJournalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWriteableJournalsRequest::CopyFrom(const GetWriteableJournalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.GetWriteableJournalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWriteableJournalsRequest::IsInitialized() const {

  return true;
}

void GetWriteableJournalsRequest::Swap(GetWriteableJournalsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWriteableJournalsRequest::InternalSwap(GetWriteableJournalsRequest* other) {
  uuid_.Swap(&other->uuid_);
  vol_id_.Swap(&other->vol_id_);
  std::swap(limits_, other->limits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetWriteableJournalsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetWriteableJournalsRequest_descriptor_;
  metadata.reflection = GetWriteableJournalsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetWriteableJournalsRequest

// optional string uuid = 1;
void GetWriteableJournalsRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetWriteableJournalsRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetWriteableJournalsRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetWriteableJournalsRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetWriteableJournalsRequest.uuid)
}
 void GetWriteableJournalsRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetWriteableJournalsRequest.uuid)
}
 void GetWriteableJournalsRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetWriteableJournalsRequest.uuid)
}
 ::std::string* GetWriteableJournalsRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetWriteableJournalsRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetWriteableJournalsRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetWriteableJournalsRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetWriteableJournalsRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetWriteableJournalsRequest.uuid)
}

// optional string vol_id = 2;
void GetWriteableJournalsRequest::clear_vol_id() {
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetWriteableJournalsRequest::vol_id() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetWriteableJournalsRequest.vol_id)
  return vol_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetWriteableJournalsRequest::set_vol_id(const ::std::string& value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetWriteableJournalsRequest.vol_id)
}
 void GetWriteableJournalsRequest::set_vol_id(const char* value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetWriteableJournalsRequest.vol_id)
}
 void GetWriteableJournalsRequest::set_vol_id(const char* value, size_t size) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetWriteableJournalsRequest.vol_id)
}
 ::std::string* GetWriteableJournalsRequest::mutable_vol_id() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetWriteableJournalsRequest.vol_id)
  return vol_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetWriteableJournalsRequest::release_vol_id() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetWriteableJournalsRequest.vol_id)
  
  return vol_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetWriteableJournalsRequest::set_allocated_vol_id(::std::string* vol_id) {
  if (vol_id != NULL) {
    
  } else {
    
  }
  vol_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vol_id);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetWriteableJournalsRequest.vol_id)
}

// optional int32 limits = 3;
void GetWriteableJournalsRequest::clear_limits() {
  limits_ = 0;
}
 ::google::protobuf::int32 GetWriteableJournalsRequest::limits() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetWriteableJournalsRequest.limits)
  return limits_;
}
 void GetWriteableJournalsRequest::set_limits(::google::protobuf::int32 value) {
  
  limits_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetWriteableJournalsRequest.limits)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetWriteableJournalsResponse::kResultFieldNumber;
const int GetWriteableJournalsResponse::kJournalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetWriteableJournalsResponse::GetWriteableJournalsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.GetWriteableJournalsResponse)
}

void GetWriteableJournalsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetWriteableJournalsResponse::GetWriteableJournalsResponse(const GetWriteableJournalsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.GetWriteableJournalsResponse)
}

void GetWriteableJournalsResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
}

GetWriteableJournalsResponse::~GetWriteableJournalsResponse() {
  // @@protoc_insertion_point(destructor:huawei.proto.GetWriteableJournalsResponse)
  SharedDtor();
}

void GetWriteableJournalsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetWriteableJournalsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetWriteableJournalsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetWriteableJournalsResponse_descriptor_;
}

const GetWriteableJournalsResponse& GetWriteableJournalsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_writer_2eproto();
  return *default_instance_;
}

GetWriteableJournalsResponse* GetWriteableJournalsResponse::default_instance_ = NULL;

GetWriteableJournalsResponse* GetWriteableJournalsResponse::New(::google::protobuf::Arena* arena) const {
  GetWriteableJournalsResponse* n = new GetWriteableJournalsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetWriteableJournalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.GetWriteableJournalsResponse)
  result_ = 0;
  journals_.Clear();
}

bool GetWriteableJournalsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.GetWriteableJournalsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .huawei.proto.RESULT result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::huawei::proto::RESULT >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_journals;
        break;
      }

      // repeated string journals = 2;
      case 2: {
        if (tag == 18) {
         parse_journals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_journals()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->journals(this->journals_size() - 1).data(),
            this->journals(this->journals_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.GetWriteableJournalsResponse.journals"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_journals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.GetWriteableJournalsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.GetWriteableJournalsResponse)
  return false;
#undef DO_
}

void GetWriteableJournalsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.GetWriteableJournalsResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated string journals = 2;
  for (int i = 0; i < this->journals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->journals(i).data(), this->journals(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetWriteableJournalsResponse.journals");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->journals(i), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.GetWriteableJournalsResponse)
}

::google::protobuf::uint8* GetWriteableJournalsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.GetWriteableJournalsResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated string journals = 2;
  for (int i = 0; i < this->journals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->journals(i).data(), this->journals(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetWriteableJournalsResponse.journals");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->journals(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.GetWriteableJournalsResponse)
  return target;
}

int GetWriteableJournalsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.GetWriteableJournalsResponse)
  int total_size = 0;

  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // repeated string journals = 2;
  total_size += 1 * this->journals_size();
  for (int i = 0; i < this->journals_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->journals(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetWriteableJournalsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.GetWriteableJournalsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetWriteableJournalsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetWriteableJournalsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.GetWriteableJournalsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.GetWriteableJournalsResponse)
    MergeFrom(*source);
  }
}

void GetWriteableJournalsResponse::MergeFrom(const GetWriteableJournalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.GetWriteableJournalsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  journals_.MergeFrom(from.journals_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void GetWriteableJournalsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.GetWriteableJournalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetWriteableJournalsResponse::CopyFrom(const GetWriteableJournalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.GetWriteableJournalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWriteableJournalsResponse::IsInitialized() const {

  return true;
}

void GetWriteableJournalsResponse::Swap(GetWriteableJournalsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetWriteableJournalsResponse::InternalSwap(GetWriteableJournalsResponse* other) {
  std::swap(result_, other->result_);
  journals_.UnsafeArenaSwap(&other->journals_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetWriteableJournalsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetWriteableJournalsResponse_descriptor_;
  metadata.reflection = GetWriteableJournalsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetWriteableJournalsResponse

// optional .huawei.proto.RESULT result = 1;
void GetWriteableJournalsResponse::clear_result() {
  result_ = 0;
}
 ::huawei::proto::RESULT GetWriteableJournalsResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetWriteableJournalsResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
 void GetWriteableJournalsResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetWriteableJournalsResponse.result)
}

// repeated string journals = 2;
int GetWriteableJournalsResponse::journals_size() const {
  return journals_.size();
}
void GetWriteableJournalsResponse::clear_journals() {
  journals_.Clear();
}
 const ::std::string& GetWriteableJournalsResponse::journals(int index) const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetWriteableJournalsResponse.journals)
  return journals_.Get(index);
}
 ::std::string* GetWriteableJournalsResponse::mutable_journals(int index) {
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetWriteableJournalsResponse.journals)
  return journals_.Mutable(index);
}
 void GetWriteableJournalsResponse::set_journals(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:huawei.proto.GetWriteableJournalsResponse.journals)
  journals_.Mutable(index)->assign(value);
}
 void GetWriteableJournalsResponse::set_journals(int index, const char* value) {
  journals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetWriteableJournalsResponse.journals)
}
 void GetWriteableJournalsResponse::set_journals(int index, const char* value, size_t size) {
  journals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetWriteableJournalsResponse.journals)
}
 ::std::string* GetWriteableJournalsResponse::add_journals() {
  // @@protoc_insertion_point(field_add_mutable:huawei.proto.GetWriteableJournalsResponse.journals)
  return journals_.Add();
}
 void GetWriteableJournalsResponse::add_journals(const ::std::string& value) {
  journals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:huawei.proto.GetWriteableJournalsResponse.journals)
}
 void GetWriteableJournalsResponse::add_journals(const char* value) {
  journals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:huawei.proto.GetWriteableJournalsResponse.journals)
}
 void GetWriteableJournalsResponse::add_journals(const char* value, size_t size) {
  journals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:huawei.proto.GetWriteableJournalsResponse.journals)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetWriteableJournalsResponse::journals() const {
  // @@protoc_insertion_point(field_list:huawei.proto.GetWriteableJournalsResponse.journals)
  return journals_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GetWriteableJournalsResponse::mutable_journals() {
  // @@protoc_insertion_point(field_mutable_list:huawei.proto.GetWriteableJournalsResponse.journals)
  return &journals_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SealJournalsRequest::kUuidFieldNumber;
const int SealJournalsRequest::kVolIdFieldNumber;
const int SealJournalsRequest::kJournalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SealJournalsRequest::SealJournalsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.SealJournalsRequest)
}

void SealJournalsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SealJournalsRequest::SealJournalsRequest(const SealJournalsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.SealJournalsRequest)
}

void SealJournalsRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SealJournalsRequest::~SealJournalsRequest() {
  // @@protoc_insertion_point(destructor:huawei.proto.SealJournalsRequest)
  SharedDtor();
}

void SealJournalsRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SealJournalsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SealJournalsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealJournalsRequest_descriptor_;
}

const SealJournalsRequest& SealJournalsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_writer_2eproto();
  return *default_instance_;
}

SealJournalsRequest* SealJournalsRequest::default_instance_ = NULL;

SealJournalsRequest* SealJournalsRequest::New(::google::protobuf::Arena* arena) const {
  SealJournalsRequest* n = new SealJournalsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SealJournalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.SealJournalsRequest)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  journals_.Clear();
}

bool SealJournalsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.SealJournalsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.SealJournalsRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vol_id;
        break;
      }

      // optional string vol_id = 2;
      case 2: {
        if (tag == 18) {
         parse_vol_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vol_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vol_id().data(), this->vol_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.SealJournalsRequest.vol_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_journals;
        break;
      }

      // repeated string journals = 3;
      case 3: {
        if (tag == 26) {
         parse_journals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_journals()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->journals(this->journals_size() - 1).data(),
            this->journals(this->journals_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.SealJournalsRequest.journals"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_journals;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.SealJournalsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.SealJournalsRequest)
  return false;
#undef DO_
}

void SealJournalsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.SealJournalsRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.SealJournalsRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vol_id().data(), this->vol_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.SealJournalsRequest.vol_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vol_id(), output);
  }

  // repeated string journals = 3;
  for (int i = 0; i < this->journals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->journals(i).data(), this->journals(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.SealJournalsRequest.journals");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->journals(i), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.SealJournalsRequest)
}

::google::protobuf::uint8* SealJournalsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.SealJournalsRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.SealJournalsRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vol_id().data(), this->vol_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.SealJournalsRequest.vol_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vol_id(), target);
  }

  // repeated string journals = 3;
  for (int i = 0; i < this->journals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->journals(i).data(), this->journals(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.SealJournalsRequest.journals");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->journals(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.SealJournalsRequest)
  return target;
}

int SealJournalsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.SealJournalsRequest)
  int total_size = 0;

  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string vol_id = 2;
  if (this->vol_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vol_id());
  }

  // repeated string journals = 3;
  total_size += 1 * this->journals_size();
  for (int i = 0; i < this->journals_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->journals(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SealJournalsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.SealJournalsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SealJournalsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SealJournalsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.SealJournalsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.SealJournalsRequest)
    MergeFrom(*source);
  }
}

void SealJournalsRequest::MergeFrom(const SealJournalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.SealJournalsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  journals_.MergeFrom(from.journals_);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.vol_id().size() > 0) {

    vol_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vol_id_);
  }
}

void SealJournalsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.SealJournalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealJournalsRequest::CopyFrom(const SealJournalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.SealJournalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealJournalsRequest::IsInitialized() const {

  return true;
}

void SealJournalsRequest::Swap(SealJournalsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SealJournalsRequest::InternalSwap(SealJournalsRequest* other) {
  uuid_.Swap(&other->uuid_);
  vol_id_.Swap(&other->vol_id_);
  journals_.UnsafeArenaSwap(&other->journals_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SealJournalsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SealJournalsRequest_descriptor_;
  metadata.reflection = SealJournalsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SealJournalsRequest

// optional string uuid = 1;
void SealJournalsRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SealJournalsRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.SealJournalsRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SealJournalsRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.SealJournalsRequest.uuid)
}
 void SealJournalsRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.SealJournalsRequest.uuid)
}
 void SealJournalsRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.SealJournalsRequest.uuid)
}
 ::std::string* SealJournalsRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.SealJournalsRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SealJournalsRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.SealJournalsRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SealJournalsRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.SealJournalsRequest.uuid)
}

// optional string vol_id = 2;
void SealJournalsRequest::clear_vol_id() {
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SealJournalsRequest::vol_id() const {
  // @@protoc_insertion_point(field_get:huawei.proto.SealJournalsRequest.vol_id)
  return vol_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SealJournalsRequest::set_vol_id(const ::std::string& value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.SealJournalsRequest.vol_id)
}
 void SealJournalsRequest::set_vol_id(const char* value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.SealJournalsRequest.vol_id)
}
 void SealJournalsRequest::set_vol_id(const char* value, size_t size) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.SealJournalsRequest.vol_id)
}
 ::std::string* SealJournalsRequest::mutable_vol_id() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.SealJournalsRequest.vol_id)
  return vol_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SealJournalsRequest::release_vol_id() {
  // @@protoc_insertion_point(field_release:huawei.proto.SealJournalsRequest.vol_id)
  
  return vol_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SealJournalsRequest::set_allocated_vol_id(::std::string* vol_id) {
  if (vol_id != NULL) {
    
  } else {
    
  }
  vol_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vol_id);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.SealJournalsRequest.vol_id)
}

// repeated string journals = 3;
int SealJournalsRequest::journals_size() const {
  return journals_.size();
}
void SealJournalsRequest::clear_journals() {
  journals_.Clear();
}
 const ::std::string& SealJournalsRequest::journals(int index) const {
  // @@protoc_insertion_point(field_get:huawei.proto.SealJournalsRequest.journals)
  return journals_.Get(index);
}
 ::std::string* SealJournalsRequest::mutable_journals(int index) {
  // @@protoc_insertion_point(field_mutable:huawei.proto.SealJournalsRequest.journals)
  return journals_.Mutable(index);
}
 void SealJournalsRequest::set_journals(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:huawei.proto.SealJournalsRequest.journals)
  journals_.Mutable(index)->assign(value);
}
 void SealJournalsRequest::set_journals(int index, const char* value) {
  journals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:huawei.proto.SealJournalsRequest.journals)
}
 void SealJournalsRequest::set_journals(int index, const char* value, size_t size) {
  journals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.SealJournalsRequest.journals)
}
 ::std::string* SealJournalsRequest::add_journals() {
  // @@protoc_insertion_point(field_add_mutable:huawei.proto.SealJournalsRequest.journals)
  return journals_.Add();
}
 void SealJournalsRequest::add_journals(const ::std::string& value) {
  journals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:huawei.proto.SealJournalsRequest.journals)
}
 void SealJournalsRequest::add_journals(const char* value) {
  journals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:huawei.proto.SealJournalsRequest.journals)
}
 void SealJournalsRequest::add_journals(const char* value, size_t size) {
  journals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:huawei.proto.SealJournalsRequest.journals)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SealJournalsRequest::journals() const {
  // @@protoc_insertion_point(field_list:huawei.proto.SealJournalsRequest.journals)
  return journals_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SealJournalsRequest::mutable_journals() {
  // @@protoc_insertion_point(field_mutable_list:huawei.proto.SealJournalsRequest.journals)
  return &journals_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SealJournalsResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SealJournalsResponse::SealJournalsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.SealJournalsResponse)
}

void SealJournalsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SealJournalsResponse::SealJournalsResponse(const SealJournalsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.SealJournalsResponse)
}

void SealJournalsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
}

SealJournalsResponse::~SealJournalsResponse() {
  // @@protoc_insertion_point(destructor:huawei.proto.SealJournalsResponse)
  SharedDtor();
}

void SealJournalsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SealJournalsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SealJournalsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealJournalsResponse_descriptor_;
}

const SealJournalsResponse& SealJournalsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_writer_2eproto();
  return *default_instance_;
}

SealJournalsResponse* SealJournalsResponse::default_instance_ = NULL;

SealJournalsResponse* SealJournalsResponse::New(::google::protobuf::Arena* arena) const {
  SealJournalsResponse* n = new SealJournalsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SealJournalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.SealJournalsResponse)
  result_ = 0;
}

bool SealJournalsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.SealJournalsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .huawei.proto.RESULT result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::huawei::proto::RESULT >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.SealJournalsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.SealJournalsResponse)
  return false;
#undef DO_
}

void SealJournalsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.SealJournalsResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.SealJournalsResponse)
}

::google::protobuf::uint8* SealJournalsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.SealJournalsResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.SealJournalsResponse)
  return target;
}

int SealJournalsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.SealJournalsResponse)
  int total_size = 0;

  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SealJournalsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.SealJournalsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SealJournalsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SealJournalsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.SealJournalsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.SealJournalsResponse)
    MergeFrom(*source);
  }
}

void SealJournalsResponse::MergeFrom(const SealJournalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.SealJournalsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void SealJournalsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.SealJournalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealJournalsResponse::CopyFrom(const SealJournalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.SealJournalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealJournalsResponse::IsInitialized() const {

  return true;
}

void SealJournalsResponse::Swap(SealJournalsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SealJournalsResponse::InternalSwap(SealJournalsResponse* other) {
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SealJournalsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SealJournalsResponse_descriptor_;
  metadata.reflection = SealJournalsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SealJournalsResponse

// optional .huawei.proto.RESULT result = 1;
void SealJournalsResponse::clear_result() {
  result_ = 0;
}
 ::huawei::proto::RESULT SealJournalsResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.SealJournalsResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
 void SealJournalsResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.SealJournalsResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMultiWriteableJournalsRequest::kUuidFieldNumber;
const int GetMultiWriteableJournalsRequest::kVolIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMultiWriteableJournalsRequest::GetMultiWriteableJournalsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.GetMultiWriteableJournalsRequest)
}

void GetMultiWriteableJournalsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetMultiWriteableJournalsRequest::GetMultiWriteableJournalsRequest(const GetMultiWriteableJournalsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.GetMultiWriteableJournalsRequest)
}

void GetMultiWriteableJournalsRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetMultiWriteableJournalsRequest::~GetMultiWriteableJournalsRequest() {
  // @@protoc_insertion_point(destructor:huawei.proto.GetMultiWriteableJournalsRequest)
  SharedDtor();
}

void GetMultiWriteableJournalsRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetMultiWriteableJournalsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMultiWriteableJournalsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMultiWriteableJournalsRequest_descriptor_;
}

const GetMultiWriteableJournalsRequest& GetMultiWriteableJournalsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_writer_2eproto();
  return *default_instance_;
}

GetMultiWriteableJournalsRequest* GetMultiWriteableJournalsRequest::default_instance_ = NULL;

GetMultiWriteableJournalsRequest* GetMultiWriteableJournalsRequest::New(::google::protobuf::Arena* arena) const {
  GetMultiWriteableJournalsRequest* n = new GetMultiWriteableJournalsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMultiWriteableJournalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.GetMultiWriteableJournalsRequest)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vol_id_.Clear();
}

bool GetMultiWriteableJournalsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.GetMultiWriteableJournalsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.GetMultiWriteableJournalsRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vol_id;
        break;
      }

      // repeated string vol_id = 2;
      case 2: {
        if (tag == 18) {
         parse_vol_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_vol_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vol_id(this->vol_id_size() - 1).data(),
            this->vol_id(this->vol_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.GetMultiWriteableJournalsRequest.vol_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_vol_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.GetMultiWriteableJournalsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.GetMultiWriteableJournalsRequest)
  return false;
#undef DO_
}

void GetMultiWriteableJournalsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.GetMultiWriteableJournalsRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetMultiWriteableJournalsRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // repeated string vol_id = 2;
  for (int i = 0; i < this->vol_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vol_id(i).data(), this->vol_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetMultiWriteableJournalsRequest.vol_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->vol_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.GetMultiWriteableJournalsRequest)
}

::google::protobuf::uint8* GetMultiWriteableJournalsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.GetMultiWriteableJournalsRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetMultiWriteableJournalsRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // repeated string vol_id = 2;
  for (int i = 0; i < this->vol_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vol_id(i).data(), this->vol_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.GetMultiWriteableJournalsRequest.vol_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->vol_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.GetMultiWriteableJournalsRequest)
  return target;
}

int GetMultiWriteableJournalsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.GetMultiWriteableJournalsRequest)
  int total_size = 0;

  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // repeated string vol_id = 2;
  total_size += 1 * this->vol_id_size();
  for (int i = 0; i < this->vol_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->vol_id(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMultiWriteableJournalsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.GetMultiWriteableJournalsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetMultiWriteableJournalsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMultiWriteableJournalsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.GetMultiWriteableJournalsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.GetMultiWriteableJournalsRequest)
    MergeFrom(*source);
  }
}

void GetMultiWriteableJournalsRequest::MergeFrom(const GetMultiWriteableJournalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.GetMultiWriteableJournalsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  vol_id_.MergeFrom(from.vol_id_);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void GetMultiWriteableJournalsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.GetMultiWriteableJournalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMultiWriteableJournalsRequest::CopyFrom(const GetMultiWriteableJournalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.GetMultiWriteableJournalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiWriteableJournalsRequest::IsInitialized() const {

  return true;
}

void GetMultiWriteableJournalsRequest::Swap(GetMultiWriteableJournalsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMultiWriteableJournalsRequest::InternalSwap(GetMultiWriteableJournalsRequest* other) {
  uuid_.Swap(&other->uuid_);
  vol_id_.UnsafeArenaSwap(&other->vol_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMultiWriteableJournalsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMultiWriteableJournalsRequest_descriptor_;
  metadata.reflection = GetMultiWriteableJournalsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMultiWriteableJournalsRequest

// optional string uuid = 1;
void GetMultiWriteableJournalsRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetMultiWriteableJournalsRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetMultiWriteableJournalsRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
}
 void GetMultiWriteableJournalsRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
}
 void GetMultiWriteableJournalsRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
}
 ::std::string* GetMultiWriteableJournalsRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetMultiWriteableJournalsRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetMultiWriteableJournalsRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
}

// repeated string vol_id = 2;
int GetMultiWriteableJournalsRequest::vol_id_size() const {
  return vol_id_.size();
}
void GetMultiWriteableJournalsRequest::clear_vol_id() {
  vol_id_.Clear();
}
 const ::std::string& GetMultiWriteableJournalsRequest::vol_id(int index) const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetMultiWriteableJournalsRequest.vol_id)
  return vol_id_.Get(index);
}
 ::std::string* GetMultiWriteableJournalsRequest::mutable_vol_id(int index) {
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetMultiWriteableJournalsRequest.vol_id)
  return vol_id_.Mutable(index);
}
 void GetMultiWriteableJournalsRequest::set_vol_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:huawei.proto.GetMultiWriteableJournalsRequest.vol_id)
  vol_id_.Mutable(index)->assign(value);
}
 void GetMultiWriteableJournalsRequest::set_vol_id(int index, const char* value) {
  vol_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetMultiWriteableJournalsRequest.vol_id)
}
 void GetMultiWriteableJournalsRequest::set_vol_id(int index, const char* value, size_t size) {
  vol_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetMultiWriteableJournalsRequest.vol_id)
}
 ::std::string* GetMultiWriteableJournalsRequest::add_vol_id() {
  // @@protoc_insertion_point(field_add_mutable:huawei.proto.GetMultiWriteableJournalsRequest.vol_id)
  return vol_id_.Add();
}
 void GetMultiWriteableJournalsRequest::add_vol_id(const ::std::string& value) {
  vol_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:huawei.proto.GetMultiWriteableJournalsRequest.vol_id)
}
 void GetMultiWriteableJournalsRequest::add_vol_id(const char* value) {
  vol_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:huawei.proto.GetMultiWriteableJournalsRequest.vol_id)
}
 void GetMultiWriteableJournalsRequest::add_vol_id(const char* value, size_t size) {
  vol_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:huawei.proto.GetMultiWriteableJournalsRequest.vol_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetMultiWriteableJournalsRequest::vol_id() const {
  // @@protoc_insertion_point(field_list:huawei.proto.GetMultiWriteableJournalsRequest.vol_id)
  return vol_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
GetMultiWriteableJournalsRequest::mutable_vol_id() {
  // @@protoc_insertion_point(field_mutable_list:huawei.proto.GetMultiWriteableJournalsRequest.vol_id)
  return &vol_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JournalArray::kJournalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JournalArray::JournalArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.JournalArray)
}

void JournalArray::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

JournalArray::JournalArray(const JournalArray& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.JournalArray)
}

void JournalArray::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

JournalArray::~JournalArray() {
  // @@protoc_insertion_point(destructor:huawei.proto.JournalArray)
  SharedDtor();
}

void JournalArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JournalArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JournalArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JournalArray_descriptor_;
}

const JournalArray& JournalArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_writer_2eproto();
  return *default_instance_;
}

JournalArray* JournalArray::default_instance_ = NULL;

JournalArray* JournalArray::New(::google::protobuf::Arena* arena) const {
  JournalArray* n = new JournalArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JournalArray::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.JournalArray)
  journal_.Clear();
}

bool JournalArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.JournalArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string journal = 1;
      case 1: {
        if (tag == 10) {
         parse_journal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_journal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->journal(this->journal_size() - 1).data(),
            this->journal(this->journal_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.JournalArray.journal"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_journal;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.JournalArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.JournalArray)
  return false;
#undef DO_
}

void JournalArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.JournalArray)
  // repeated string journal = 1;
  for (int i = 0; i < this->journal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->journal(i).data(), this->journal(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.JournalArray.journal");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->journal(i), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.JournalArray)
}

::google::protobuf::uint8* JournalArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.JournalArray)
  // repeated string journal = 1;
  for (int i = 0; i < this->journal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->journal(i).data(), this->journal(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.JournalArray.journal");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->journal(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.JournalArray)
  return target;
}

int JournalArray::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.JournalArray)
  int total_size = 0;

  // repeated string journal = 1;
  total_size += 1 * this->journal_size();
  for (int i = 0; i < this->journal_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->journal(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JournalArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.JournalArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JournalArray* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JournalArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.JournalArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.JournalArray)
    MergeFrom(*source);
  }
}

void JournalArray::MergeFrom(const JournalArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.JournalArray)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  journal_.MergeFrom(from.journal_);
}

void JournalArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.JournalArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JournalArray::CopyFrom(const JournalArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.JournalArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalArray::IsInitialized() const {

  return true;
}

void JournalArray::Swap(JournalArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JournalArray::InternalSwap(JournalArray* other) {
  journal_.UnsafeArenaSwap(&other->journal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JournalArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JournalArray_descriptor_;
  metadata.reflection = JournalArray_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JournalArray

// repeated string journal = 1;
int JournalArray::journal_size() const {
  return journal_.size();
}
void JournalArray::clear_journal() {
  journal_.Clear();
}
 const ::std::string& JournalArray::journal(int index) const {
  // @@protoc_insertion_point(field_get:huawei.proto.JournalArray.journal)
  return journal_.Get(index);
}
 ::std::string* JournalArray::mutable_journal(int index) {
  // @@protoc_insertion_point(field_mutable:huawei.proto.JournalArray.journal)
  return journal_.Mutable(index);
}
 void JournalArray::set_journal(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:huawei.proto.JournalArray.journal)
  journal_.Mutable(index)->assign(value);
}
 void JournalArray::set_journal(int index, const char* value) {
  journal_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:huawei.proto.JournalArray.journal)
}
 void JournalArray::set_journal(int index, const char* value, size_t size) {
  journal_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.JournalArray.journal)
}
 ::std::string* JournalArray::add_journal() {
  // @@protoc_insertion_point(field_add_mutable:huawei.proto.JournalArray.journal)
  return journal_.Add();
}
 void JournalArray::add_journal(const ::std::string& value) {
  journal_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:huawei.proto.JournalArray.journal)
}
 void JournalArray::add_journal(const char* value) {
  journal_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:huawei.proto.JournalArray.journal)
}
 void JournalArray::add_journal(const char* value, size_t size) {
  journal_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:huawei.proto.JournalArray.journal)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
JournalArray::journal() const {
  // @@protoc_insertion_point(field_list:huawei.proto.JournalArray.journal)
  return journal_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
JournalArray::mutable_journal() {
  // @@protoc_insertion_point(field_mutable_list:huawei.proto.JournalArray.journal)
  return &journal_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMultiWriteableJournalsResponse::kResultFieldNumber;
const int GetMultiWriteableJournalsResponse::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMultiWriteableJournalsResponse::GetMultiWriteableJournalsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.GetMultiWriteableJournalsResponse)
}

void GetMultiWriteableJournalsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetMultiWriteableJournalsResponse::GetMultiWriteableJournalsResponse(const GetMultiWriteableJournalsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.GetMultiWriteableJournalsResponse)
}

void GetMultiWriteableJournalsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
  map_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_.SetEntryDescriptor(
      &::huawei::proto::GetMultiWriteableJournalsResponse_MapEntry_descriptor_);
}

GetMultiWriteableJournalsResponse::~GetMultiWriteableJournalsResponse() {
  // @@protoc_insertion_point(destructor:huawei.proto.GetMultiWriteableJournalsResponse)
  SharedDtor();
}

void GetMultiWriteableJournalsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMultiWriteableJournalsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMultiWriteableJournalsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMultiWriteableJournalsResponse_descriptor_;
}

const GetMultiWriteableJournalsResponse& GetMultiWriteableJournalsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_writer_2eproto();
  return *default_instance_;
}

GetMultiWriteableJournalsResponse* GetMultiWriteableJournalsResponse::default_instance_ = NULL;

GetMultiWriteableJournalsResponse* GetMultiWriteableJournalsResponse::New(::google::protobuf::Arena* arena) const {
  GetMultiWriteableJournalsResponse* n = new GetMultiWriteableJournalsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMultiWriteableJournalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.GetMultiWriteableJournalsResponse)
  result_ = 0;
  map_.Clear();
}

bool GetMultiWriteableJournalsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.GetMultiWriteableJournalsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .huawei.proto.RESULT result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::huawei::proto::RESULT >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map;
        break;
      }

      // map<string, .huawei.proto.JournalArray> map = 2;
      case 2: {
        if (tag == 18) {
         parse_map:
          DO_(input->IncrementRecursionDepth());
         parse_loop_map:
          ::google::protobuf::scoped_ptr<GetMultiWriteableJournalsResponse_MapEntry> entry(map_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_map())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.GetMultiWriteableJournalsResponse.MapEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_map;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.GetMultiWriteableJournalsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.GetMultiWriteableJournalsResponse)
  return false;
#undef DO_
}

void GetMultiWriteableJournalsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.GetMultiWriteableJournalsResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // map<string, .huawei.proto.JournalArray> map = 2;
  {
    ::google::protobuf::scoped_ptr<GetMultiWriteableJournalsResponse_MapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >::const_iterator
        it = this->map().begin();
        it != this->map().end(); ++it) {
      entry.reset(map_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          2, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "huawei.proto.GetMultiWriteableJournalsResponse.MapEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.GetMultiWriteableJournalsResponse)
}

::google::protobuf::uint8* GetMultiWriteableJournalsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.GetMultiWriteableJournalsResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // map<string, .huawei.proto.JournalArray> map = 2;
  {
    ::google::protobuf::scoped_ptr<GetMultiWriteableJournalsResponse_MapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >::const_iterator
        it = this->map().begin();
        it != this->map().end(); ++it) {
      entry.reset(map_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              2, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "huawei.proto.GetMultiWriteableJournalsResponse.MapEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.GetMultiWriteableJournalsResponse)
  return target;
}

int GetMultiWriteableJournalsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.GetMultiWriteableJournalsResponse)
  int total_size = 0;

  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // map<string, .huawei.proto.JournalArray> map = 2;
  total_size += 1 * this->map_size();
  {
    ::google::protobuf::scoped_ptr<GetMultiWriteableJournalsResponse_MapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >::const_iterator
        it = this->map().begin();
        it != this->map().end(); ++it) {
      entry.reset(map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMultiWriteableJournalsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.GetMultiWriteableJournalsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetMultiWriteableJournalsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMultiWriteableJournalsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.GetMultiWriteableJournalsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.GetMultiWriteableJournalsResponse)
    MergeFrom(*source);
  }
}

void GetMultiWriteableJournalsResponse::MergeFrom(const GetMultiWriteableJournalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.GetMultiWriteableJournalsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  map_.MergeFrom(from.map_);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void GetMultiWriteableJournalsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.GetMultiWriteableJournalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMultiWriteableJournalsResponse::CopyFrom(const GetMultiWriteableJournalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.GetMultiWriteableJournalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiWriteableJournalsResponse::IsInitialized() const {

  return true;
}

void GetMultiWriteableJournalsResponse::Swap(GetMultiWriteableJournalsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMultiWriteableJournalsResponse::InternalSwap(GetMultiWriteableJournalsResponse* other) {
  std::swap(result_, other->result_);
  map_.Swap(&other->map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMultiWriteableJournalsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMultiWriteableJournalsResponse_descriptor_;
  metadata.reflection = GetMultiWriteableJournalsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMultiWriteableJournalsResponse

// optional .huawei.proto.RESULT result = 1;
void GetMultiWriteableJournalsResponse::clear_result() {
  result_ = 0;
}
 ::huawei::proto::RESULT GetMultiWriteableJournalsResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetMultiWriteableJournalsResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
 void GetMultiWriteableJournalsResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetMultiWriteableJournalsResponse.result)
}

// map<string, .huawei.proto.JournalArray> map = 2;
int GetMultiWriteableJournalsResponse::map_size() const {
  return map_.size();
}
void GetMultiWriteableJournalsResponse::clear_map() {
  map_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >&
GetMultiWriteableJournalsResponse::map() const {
  // @@protoc_insertion_point(field_map:huawei.proto.GetMultiWriteableJournalsResponse.map)
  return map_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >*
GetMultiWriteableJournalsResponse::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:huawei.proto.GetMultiWriteableJournalsResponse.map)
  return map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SealMultiJournalsRequest::kUuidFieldNumber;
const int SealMultiJournalsRequest::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SealMultiJournalsRequest::SealMultiJournalsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.SealMultiJournalsRequest)
}

void SealMultiJournalsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SealMultiJournalsRequest::SealMultiJournalsRequest(const SealMultiJournalsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.SealMultiJournalsRequest)
}

void SealMultiJournalsRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  map_.SetEntryDescriptor(
      &::huawei::proto::SealMultiJournalsRequest_MapEntry_descriptor_);
}

SealMultiJournalsRequest::~SealMultiJournalsRequest() {
  // @@protoc_insertion_point(destructor:huawei.proto.SealMultiJournalsRequest)
  SharedDtor();
}

void SealMultiJournalsRequest::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SealMultiJournalsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SealMultiJournalsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealMultiJournalsRequest_descriptor_;
}

const SealMultiJournalsRequest& SealMultiJournalsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_writer_2eproto();
  return *default_instance_;
}

SealMultiJournalsRequest* SealMultiJournalsRequest::default_instance_ = NULL;

SealMultiJournalsRequest* SealMultiJournalsRequest::New(::google::protobuf::Arena* arena) const {
  SealMultiJournalsRequest* n = new SealMultiJournalsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SealMultiJournalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.SealMultiJournalsRequest)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.Clear();
}

bool SealMultiJournalsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.SealMultiJournalsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.SealMultiJournalsRequest.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map;
        break;
      }

      // map<string, .huawei.proto.JournalArray> map = 2;
      case 2: {
        if (tag == 18) {
         parse_map:
          DO_(input->IncrementRecursionDepth());
         parse_loop_map:
          ::google::protobuf::scoped_ptr<SealMultiJournalsRequest_MapEntry> entry(map_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_map())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.SealMultiJournalsRequest.MapEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_map;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.SealMultiJournalsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.SealMultiJournalsRequest)
  return false;
#undef DO_
}

void SealMultiJournalsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.SealMultiJournalsRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.SealMultiJournalsRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // map<string, .huawei.proto.JournalArray> map = 2;
  {
    ::google::protobuf::scoped_ptr<SealMultiJournalsRequest_MapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >::const_iterator
        it = this->map().begin();
        it != this->map().end(); ++it) {
      entry.reset(map_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          2, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "huawei.proto.SealMultiJournalsRequest.MapEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.SealMultiJournalsRequest)
}

::google::protobuf::uint8* SealMultiJournalsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.SealMultiJournalsRequest)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.SealMultiJournalsRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // map<string, .huawei.proto.JournalArray> map = 2;
  {
    ::google::protobuf::scoped_ptr<SealMultiJournalsRequest_MapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >::const_iterator
        it = this->map().begin();
        it != this->map().end(); ++it) {
      entry.reset(map_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              2, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "huawei.proto.SealMultiJournalsRequest.MapEntry.key");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.SealMultiJournalsRequest)
  return target;
}

int SealMultiJournalsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.SealMultiJournalsRequest)
  int total_size = 0;

  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // map<string, .huawei.proto.JournalArray> map = 2;
  total_size += 1 * this->map_size();
  {
    ::google::protobuf::scoped_ptr<SealMultiJournalsRequest_MapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >::const_iterator
        it = this->map().begin();
        it != this->map().end(); ++it) {
      entry.reset(map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SealMultiJournalsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.SealMultiJournalsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SealMultiJournalsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SealMultiJournalsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.SealMultiJournalsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.SealMultiJournalsRequest)
    MergeFrom(*source);
  }
}

void SealMultiJournalsRequest::MergeFrom(const SealMultiJournalsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.SealMultiJournalsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  map_.MergeFrom(from.map_);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void SealMultiJournalsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.SealMultiJournalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealMultiJournalsRequest::CopyFrom(const SealMultiJournalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.SealMultiJournalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealMultiJournalsRequest::IsInitialized() const {

  return true;
}

void SealMultiJournalsRequest::Swap(SealMultiJournalsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SealMultiJournalsRequest::InternalSwap(SealMultiJournalsRequest* other) {
  uuid_.Swap(&other->uuid_);
  map_.Swap(&other->map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SealMultiJournalsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SealMultiJournalsRequest_descriptor_;
  metadata.reflection = SealMultiJournalsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SealMultiJournalsRequest

// optional string uuid = 1;
void SealMultiJournalsRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SealMultiJournalsRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.SealMultiJournalsRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SealMultiJournalsRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.SealMultiJournalsRequest.uuid)
}
 void SealMultiJournalsRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.SealMultiJournalsRequest.uuid)
}
 void SealMultiJournalsRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.SealMultiJournalsRequest.uuid)
}
 ::std::string* SealMultiJournalsRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.SealMultiJournalsRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SealMultiJournalsRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.SealMultiJournalsRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SealMultiJournalsRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.SealMultiJournalsRequest.uuid)
}

// map<string, .huawei.proto.JournalArray> map = 2;
int SealMultiJournalsRequest::map_size() const {
  return map_.size();
}
void SealMultiJournalsRequest::clear_map() {
  map_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >&
SealMultiJournalsRequest::map() const {
  // @@protoc_insertion_point(field_map:huawei.proto.SealMultiJournalsRequest.map)
  return map_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >*
SealMultiJournalsRequest::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:huawei.proto.SealMultiJournalsRequest.map)
  return map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SealMultiJournalsResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SealMultiJournalsResponse::SealMultiJournalsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.SealMultiJournalsResponse)
}

void SealMultiJournalsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SealMultiJournalsResponse::SealMultiJournalsResponse(const SealMultiJournalsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.SealMultiJournalsResponse)
}

void SealMultiJournalsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  result_ = 0;
}

SealMultiJournalsResponse::~SealMultiJournalsResponse() {
  // @@protoc_insertion_point(destructor:huawei.proto.SealMultiJournalsResponse)
  SharedDtor();
}

void SealMultiJournalsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SealMultiJournalsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SealMultiJournalsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealMultiJournalsResponse_descriptor_;
}

const SealMultiJournalsResponse& SealMultiJournalsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_writer_2eproto();
  return *default_instance_;
}

SealMultiJournalsResponse* SealMultiJournalsResponse::default_instance_ = NULL;

SealMultiJournalsResponse* SealMultiJournalsResponse::New(::google::protobuf::Arena* arena) const {
  SealMultiJournalsResponse* n = new SealMultiJournalsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SealMultiJournalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.SealMultiJournalsResponse)
  result_ = 0;
}

bool SealMultiJournalsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.SealMultiJournalsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .huawei.proto.RESULT result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::huawei::proto::RESULT >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.SealMultiJournalsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.SealMultiJournalsResponse)
  return false;
#undef DO_
}

void SealMultiJournalsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.SealMultiJournalsResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.SealMultiJournalsResponse)
}

::google::protobuf::uint8* SealMultiJournalsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.SealMultiJournalsResponse)
  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.SealMultiJournalsResponse)
  return target;
}

int SealMultiJournalsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.SealMultiJournalsResponse)
  int total_size = 0;

  // optional .huawei.proto.RESULT result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SealMultiJournalsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.SealMultiJournalsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SealMultiJournalsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SealMultiJournalsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.SealMultiJournalsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.SealMultiJournalsResponse)
    MergeFrom(*source);
  }
}

void SealMultiJournalsResponse::MergeFrom(const SealMultiJournalsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.SealMultiJournalsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void SealMultiJournalsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.SealMultiJournalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealMultiJournalsResponse::CopyFrom(const SealMultiJournalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.SealMultiJournalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealMultiJournalsResponse::IsInitialized() const {

  return true;
}

void SealMultiJournalsResponse::Swap(SealMultiJournalsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SealMultiJournalsResponse::InternalSwap(SealMultiJournalsResponse* other) {
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SealMultiJournalsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SealMultiJournalsResponse_descriptor_;
  metadata.reflection = SealMultiJournalsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SealMultiJournalsResponse

// optional .huawei.proto.RESULT result = 1;
void SealMultiJournalsResponse::clear_result() {
  result_ = 0;
}
 ::huawei::proto::RESULT SealMultiJournalsResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.SealMultiJournalsResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
 void SealMultiJournalsResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.SealMultiJournalsResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace huawei

// @@protoc_insertion_point(global_scope)
