// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: journal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "journal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace huawei {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* JournalMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JournalMeta_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* JOURNAL_STATUS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_journal_2eproto() {
  protobuf_AddDesc_journal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "journal.proto");
  GOOGLE_CHECK(file != NULL);
  JournalMeta_descriptor_ = file->message_type(0);
  static const int JournalMeta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalMeta, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalMeta, status_),
  };
  JournalMeta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JournalMeta_descriptor_,
      JournalMeta::default_instance_,
      JournalMeta_offsets_,
      -1,
      -1,
      -1,
      sizeof(JournalMeta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalMeta, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JournalMeta, _is_default_instance_));
  JOURNAL_STATUS_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_journal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JournalMeta_descriptor_, &JournalMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_journal_2eproto() {
  delete JournalMeta::default_instance_;
  delete JournalMeta_reflection_;
}

void protobuf_AddDesc_journal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rjournal.proto\022\014huawei.proto\"I\n\013Journal"
    "Meta\022\014\n\004path\030\001 \001(\t\022,\n\006status\030\002 \001(\0162\034.hua"
    "wei.proto.JOURNAL_STATUS*5\n\016JOURNAL_STAT"
    "US\022\013\n\007CREATED\020\000\022\n\n\006OPENED\020\001\022\n\n\006SEALED\020\002B"
    "\006\242\002\003DRSb\006proto3", 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "journal.proto", &protobuf_RegisterTypes);
  JournalMeta::default_instance_ = new JournalMeta();
  JournalMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_journal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_journal_2eproto {
  StaticDescriptorInitializer_journal_2eproto() {
    protobuf_AddDesc_journal_2eproto();
  }
} static_descriptor_initializer_journal_2eproto_;
const ::google::protobuf::EnumDescriptor* JOURNAL_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOURNAL_STATUS_descriptor_;
}
bool JOURNAL_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JournalMeta::kPathFieldNumber;
const int JournalMeta::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JournalMeta::JournalMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:huawei.proto.JournalMeta)
}

void JournalMeta::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

JournalMeta::JournalMeta(const JournalMeta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:huawei.proto.JournalMeta)
}

void JournalMeta::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

JournalMeta::~JournalMeta() {
  // @@protoc_insertion_point(destructor:huawei.proto.JournalMeta)
  SharedDtor();
}

void JournalMeta::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void JournalMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JournalMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JournalMeta_descriptor_;
}

const JournalMeta& JournalMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_journal_2eproto();
  return *default_instance_;
}

JournalMeta* JournalMeta::default_instance_ = NULL;

JournalMeta* JournalMeta::New(::google::protobuf::Arena* arena) const {
  JournalMeta* n = new JournalMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JournalMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:huawei.proto.JournalMeta)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

bool JournalMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:huawei.proto.JournalMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "huawei.proto.JournalMeta.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .huawei.proto.JOURNAL_STATUS status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::huawei::proto::JOURNAL_STATUS >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:huawei.proto.JournalMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:huawei.proto.JournalMeta)
  return false;
#undef DO_
}

void JournalMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:huawei.proto.JournalMeta)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.JournalMeta.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional .huawei.proto.JOURNAL_STATUS status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:huawei.proto.JournalMeta)
}

::google::protobuf::uint8* JournalMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:huawei.proto.JournalMeta)
  // optional string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "huawei.proto.JournalMeta.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional .huawei.proto.JOURNAL_STATUS status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:huawei.proto.JournalMeta)
  return target;
}

int JournalMeta::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:huawei.proto.JournalMeta)
  int total_size = 0;

  // optional string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // optional .huawei.proto.JOURNAL_STATUS status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JournalMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:huawei.proto.JournalMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JournalMeta* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const JournalMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:huawei.proto.JournalMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:huawei.proto.JournalMeta)
    MergeFrom(*source);
  }
}

void JournalMeta::MergeFrom(const JournalMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:huawei.proto.JournalMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void JournalMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:huawei.proto.JournalMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JournalMeta::CopyFrom(const JournalMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:huawei.proto.JournalMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JournalMeta::IsInitialized() const {

  return true;
}

void JournalMeta::Swap(JournalMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JournalMeta::InternalSwap(JournalMeta* other) {
  path_.Swap(&other->path_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JournalMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JournalMeta_descriptor_;
  metadata.reflection = JournalMeta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JournalMeta

// optional string path = 1;
void JournalMeta::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& JournalMeta::path() const {
  // @@protoc_insertion_point(field_get:huawei.proto.JournalMeta.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JournalMeta::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.JournalMeta.path)
}
 void JournalMeta::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.JournalMeta.path)
}
 void JournalMeta::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.JournalMeta.path)
}
 ::std::string* JournalMeta::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.JournalMeta.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JournalMeta::release_path() {
  // @@protoc_insertion_point(field_release:huawei.proto.JournalMeta.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JournalMeta::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.JournalMeta.path)
}

// optional .huawei.proto.JOURNAL_STATUS status = 2;
void JournalMeta::clear_status() {
  status_ = 0;
}
 ::huawei::proto::JOURNAL_STATUS JournalMeta::status() const {
  // @@protoc_insertion_point(field_get:huawei.proto.JournalMeta.status)
  return static_cast< ::huawei::proto::JOURNAL_STATUS >(status_);
}
 void JournalMeta::set_status(::huawei::proto::JOURNAL_STATUS value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.JournalMeta.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace huawei

// @@protoc_insertion_point(global_scope)
