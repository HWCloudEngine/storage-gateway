// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: journal.proto

#ifndef PROTOBUF_journal_2eproto__INCLUDED
#define PROTOBUF_journal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace huawei {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_journal_2eproto();
void protobuf_AssignDesc_journal_2eproto();
void protobuf_ShutdownFile_journal_2eproto();

class JournalIDCounters;
class JournalMeta;

enum JOURNAL_STATUS {
  CREATED = 0,
  OPENED = 1,
  SEALED = 2,
  JOURNAL_STATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  JOURNAL_STATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool JOURNAL_STATUS_IsValid(int value);
const JOURNAL_STATUS JOURNAL_STATUS_MIN = CREATED;
const JOURNAL_STATUS JOURNAL_STATUS_MAX = SEALED;
const int JOURNAL_STATUS_ARRAYSIZE = JOURNAL_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* JOURNAL_STATUS_descriptor();
inline const ::std::string& JOURNAL_STATUS_Name(JOURNAL_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    JOURNAL_STATUS_descriptor(), value);
}
inline bool JOURNAL_STATUS_Parse(
    const ::std::string& name, JOURNAL_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JOURNAL_STATUS>(
    JOURNAL_STATUS_descriptor(), name, value);
}
// ===================================================================

class JournalMeta : public ::google::protobuf::Message {
 public:
  JournalMeta();
  virtual ~JournalMeta();

  JournalMeta(const JournalMeta& from);

  inline JournalMeta& operator=(const JournalMeta& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JournalMeta& default_instance();

  void Swap(JournalMeta* other);

  // implements Message ----------------------------------------------

  inline JournalMeta* New() const { return New(NULL); }

  JournalMeta* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JournalMeta& from);
  void MergeFrom(const JournalMeta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JournalMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional .huawei.proto.JOURNAL_STATUS status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::huawei::proto::JOURNAL_STATUS status() const;
  void set_status(::huawei::proto::JOURNAL_STATUS value);

  // @@protoc_insertion_point(class_scope:huawei.proto.JournalMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_journal_2eproto();
  friend void protobuf_AssignDesc_journal_2eproto();
  friend void protobuf_ShutdownFile_journal_2eproto();

  void InitAsDefaultInstance();
  static JournalMeta* default_instance_;
};
// -------------------------------------------------------------------

class JournalIDCounters : public ::google::protobuf::Message {
 public:
  JournalIDCounters();
  virtual ~JournalIDCounters();

  JournalIDCounters(const JournalIDCounters& from);

  inline JournalIDCounters& operator=(const JournalIDCounters& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JournalIDCounters& default_instance();

  void Swap(JournalIDCounters* other);

  // implements Message ----------------------------------------------

  inline JournalIDCounters* New() const { return New(NULL); }

  JournalIDCounters* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JournalIDCounters& from);
  void MergeFrom(const JournalIDCounters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JournalIDCounters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, int64> ids = 1;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
      ids() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:huawei.proto.JournalIDCounters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 >
      JournalIDCounters_IdsEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::protobuf::int64,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      0 > ids_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_journal_2eproto();
  friend void protobuf_AssignDesc_journal_2eproto();
  friend void protobuf_ShutdownFile_journal_2eproto();

  void InitAsDefaultInstance();
  static JournalIDCounters* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// JournalMeta

// optional string path = 1;
inline void JournalMeta::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JournalMeta::path() const {
  // @@protoc_insertion_point(field_get:huawei.proto.JournalMeta.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JournalMeta::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.JournalMeta.path)
}
inline void JournalMeta::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.JournalMeta.path)
}
inline void JournalMeta::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.JournalMeta.path)
}
inline ::std::string* JournalMeta::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.JournalMeta.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JournalMeta::release_path() {
  // @@protoc_insertion_point(field_release:huawei.proto.JournalMeta.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JournalMeta::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.JournalMeta.path)
}

// optional .huawei.proto.JOURNAL_STATUS status = 2;
inline void JournalMeta::clear_status() {
  status_ = 0;
}
inline ::huawei::proto::JOURNAL_STATUS JournalMeta::status() const {
  // @@protoc_insertion_point(field_get:huawei.proto.JournalMeta.status)
  return static_cast< ::huawei::proto::JOURNAL_STATUS >(status_);
}
inline void JournalMeta::set_status(::huawei::proto::JOURNAL_STATUS value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.JournalMeta.status)
}

// -------------------------------------------------------------------

// JournalIDCounters

// map<string, int64> ids = 1;
inline int JournalIDCounters::ids_size() const {
  return ids_.size();
}
inline void JournalIDCounters::clear_ids() {
  ids_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >&
JournalIDCounters::ids() const {
  // @@protoc_insertion_point(field_map:huawei.proto.JournalIDCounters.ids)
  return ids_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int64 >*
JournalIDCounters::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_map:huawei.proto.JournalIDCounters.ids)
  return ids_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace huawei

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::huawei::proto::JOURNAL_STATUS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::huawei::proto::JOURNAL_STATUS>() {
  return ::huawei::proto::JOURNAL_STATUS_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_journal_2eproto__INCLUDED
