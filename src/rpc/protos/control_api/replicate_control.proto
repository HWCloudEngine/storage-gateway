// storage gateway control api,
// which provides control api to sg driver

syntax = "proto3";
import "common.proto";
import "replicate.proto";
package huawei.proto.control;

/*northern oriented rpc service interface*/
service ReplicateControl {
    /*replicate control operations*/
    rpc CreateReplication(CreateReplicationReq) returns(ReplicationCommonRes) {}
    rpc EnableReplication(EnableReplicationReq) returns(ReplicationCommonRes) {}
    rpc DisableReplication(DisableReplicationReq) returns(ReplicationCommonRes) {}
    rpc FailoverReplication(FailoverReplicationReq) returns(ReplicationCommonRes) {}
    rpc ReverseReplication(ReverseReplicationReq) returns(ReplicationCommonRes) {}
    rpc DeleteReplication(DeleteReplicationReq) returns(ReplicationCommonRes) {}
}

message CreateReplicationReq{
    string operate_id = 1;
    string rep_uuid = 2; // replciation unique id
    string local_volume = 3;
    repeated string peer_volumes = 4;
    RepRole role = 5;
}
message EnableReplicationReq{
    string vol_id = 1;// require, primary volume id
    RepRole role = 2;
    string operate_id = 3;
}
message DisableReplicationReq{
    string vol_id = 1;// require, primary volume id
    RepRole role = 2;
    string operate_id = 3;
}
message FailoverReplicationReq{
    string vol_id = 1;// require, primary volume id
    RepRole role = 2; // default:SECONDARY
    string operate_id = 3;
    // if primary is alive, SGS provides uniform checkpoint
    // id for both primary and secondary
    string checkpoint_id = 4;
    string snap_id = 5;
}
message ReverseReplicationReq{
    string vol_id = 1;// require, primary volume id
    RepRole role = 2;
    string operate_id = 3;
}
message DeleteReplicationReq{
    string vol_id = 1;// require, primary volume id
    RepRole role = 2;
    string operate_id = 3;
}
message ReplicationCommonRes{
    StatusCode status = 1;
}
