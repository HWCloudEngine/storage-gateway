syntax = "proto3";
import "common.proto";
import "journal/journal.proto";
package huawei.proto.inner;

/*snapshot rpc service storage client and storage gateway server*/
service SnapshotInnerControl {
    rpc Create(CreateReq) returns (CreateAck){}
    rpc List(ListReq) returns (ListAck){}
    rpc Query(QueryReq) returns (QueryAck){}
    rpc Delete(DeleteReq) returns (DeleteAck){}
    rpc Rollback(RollbackReq) returns (RollbackAck){}

    /*update snapshot status(creating, created, deleted)*/
    rpc Update(UpdateReq) returns (UpdateAck){} 

    /*cow*/
    rpc CowOp(CowReq) returns (CowAck){}
    rpc CowUpdate(CowUpdateReq) returns (CowUpdateAck) {}
    
    rpc Diff(DiffReq) returns(DiffAck){}
    rpc Read(ReadReq) returns(ReadAck){}
    
    /*gateway client crash, sync snapshot state with dr_server*/
    rpc Sync(SyncReq) returns(SyncAck){}
}

message CreateReq {
    SnapReqHead header = 1;
    string vol_name = 2;
    string snap_name = 3;
    /*use for replication enable and disable*/
    JournalMarker mark = 4;
}

message CreateAck {
    SnapAckHead header = 1;
}

message UpdateReq {
    SnapReqHead header = 1;
    string vol_name = 2;
    string snap_name = 3;
}

message UpdateAck {
    SnapAckHead header = 1;
}

message ListReq {
    SnapReqHead header = 1;
    string vol_name = 2;
}

message ListAck {
    SnapAckHead header = 1;
    repeated string snap_name = 2;
}

message QueryReq {
    SnapReqHead header = 1;
    string vol_name = 2;
    string snap_name = 3;
}

message QueryAck {
    SnapAckHead header = 1;
    SnapStatus snap_status = 2;
}

message DeleteReq {
    SnapReqHead header = 1;
    string vol_name = 2;
    string snap_name = 3;
}

message DeleteAck {
    SnapAckHead header = 1;
}

message RollbackReq {
    SnapReqHead header = 1;
    string vol_name = 2;
    string snap_name = 3;
}

/*indicate which block will be rollback*/
message RollBlock {
    uint64 blk_no = 1;
    string blk_object = 2; /*rollback data from object*/
}

message RollbackAck {
    SnapAckHead header = 1;
    repeated RollBlock roll_blocks = 2;
}

message DiffReq {
    SnapReqHead header = 1;
    string vol_name = 2;
    string first_snap_name = 3;
    string laste_snap_name = 4;
}

/*indicate which blocks diff*/
message DiffBlocks {
    string vol_name = 1;
    string snap_name = 2;
    repeated uint64 diff_block_no = 3;
}

message DiffAck {
    SnapAckHead header = 1;
    repeated DiffBlocks diff_blocks = 2;
} 

message ReadReq {
    SnapReqHead header = 1;
    string vol_name  = 2;
    string snap_name = 3;
    uint64 off       = 4;
    uint64 len       = 5;
}

/*indicate which block should read from block store, 
 *others read from blockdevice
 */
message ReadBlock {
    uint64 blk_no = 1;
    string blk_object = 2;
}

message ReadAck {
    SnapAckHead header = 1;
    repeated ReadBlock read_blocks = 2;
}

/*batch or one by one*/
message CowReq {
    SnapReqHead header = 1;
    string vol_name = 2;
    string snap_name = 3;
    uint64 blk_no = 4;
}

message CowAck {
    SnapAckHead header = 1;
    /*cow/direct overlap/other*/
    int32 op = 2;
    string cow_blk_object = 3;  /*cow data write to blk object*/
}

/*after cow, then update snapshot index in dr server*/
message CowUpdateReq {
    SnapReqHead header = 1;
    string vol_name  = 2;
    string snap_name = 3;
    uint64 blk_no    = 4;
    string cow_blk_object = 5;
}

message CowUpdateAck {
    SnapAckHead header = 1;
}

message SyncReq {
    SnapReqHead header = 1;
    string vol_name = 2;
}

message SyncAck {
    SnapAckHead header = 1;
    string latest_snap_name = 2;
}
