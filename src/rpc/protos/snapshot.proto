// storage gateway rpc request/response

syntax = "proto3";

package huawei.proto;

/*snapshot rpc service storage client and storage gateway server*/
service SnapshotRpcSvc {
    rpc Create(CreateReq) returns (CreateAck){}
    rpc List(ListReq) returns (ListAck){}
    rpc Delete(DeleteReq) returns (DeleteAck){}
    
    /*get available snapshot uid*/
    rpc GetUid(GetUidReq) returns (GetUidAck){}
    /*from name get id*/ 
    rpc GetSnapshotName(GetSnapshotNameReq) returns (GetSnapshotNameAck){}
    /*from id get name*/
    rpc GetSnapshotId(GetSnapshotIdReq) returns (GetSnapshotIdAck){}

    /*update snapshot status(creating, created, deleted)*/
    rpc SetStatus(SetStatusReq) returns (SetStatusAck){}
    rpc GetStatus(GetStatusReq) returns (GetStatusAck){}
    
    /*rollback*/
    rpc Rollback(RollbackReq) returns (RollbackAck){}
    
    /*cow*/
    rpc CowOp(CowReq) returns (CowAck){}
    rpc CowUpdate(CowUpdateReq) returns (CowUpdateAck) {}
    
    rpc Diff(DiffReq) returns(DiffAck){}
    rpc Read(ReadReq) returns(ReadAck){}
}

message GetUidReq {
    string vol_name  = 1;
    string snap_name = 2;
}

message GetUidAck {
    int32  ret = 1;
    uint64 snap_id = 2;
}

message GetSnapshotNameReq {
    string vol_name = 1;
    uint64 snap_id  = 2;
}

message GetSnapshotNameAck {
    int32  ret = 1;
    string snap_name = 2;
}

message GetSnapshotIdReq {
    string vol_name  = 1;
    string snap_name = 2;
}

message GetSnapshotIdAck {
    int32  ret = 1;
    uint64 snap_id = 2;
}

message CreateReq {
    string vol_name  = 1;
    string snap_name = 2;
    uint64 snap_id   = 3;
}

message CreateAck {
    int32  ret     = 1;
}

enum SnapshotStatus {
    SNAPSHOT_CREATING  = 0;
    SNAPSHOT_CREATED   = 1;
    SNAPSHOT_DELETING  = 2;
    SNAPSHOT_DELETED   = 3; 
    SNAPSHOT_ROLLBACKING   = 4;
    SNAPSHOT_ROLLBACKED    = 5;
} 

message SetStatusReq {
    string vol_name = 1;
    uint64 snap_id  = 2;
    SnapshotStatus snap_status = 3;
}

message SetStatusAck {
  int32 ret = 1; 
}

message GetStatusReq {
    string vol_name = 1;
    uint64 snap_id  = 2;
}

message GetStatusAck {
   int32 ret = 1; 
    SnapshotStatus snap_status = 2;
}

message ListReq {
    string vol_name = 1;
}

message ListAck {
    int32 ret                 = 1;
    repeated string snap_name = 2;
}

message DeleteReq {
    string vol_name = 1;
    uint64 snap_id  = 2;
}

message DeleteAck {
    int32 ret = 1;
}

message RollbackReq {
    string vol_name  = 1;
    uint64 snap_id = 2;
}

/*indicate which block will be rollback*/
message RollBlock {
    uint64 blk_no     = 1;
    string blk_object = 2; /*rollback data from object*/
}

message RollbackAck {
    int32 ret = 1; 
    repeated RollBlock roll_blocks = 2;
}

message DiffReq {
    string vol_name         = 1;
    string first_snap_name  = 2;
    string laste_snap_name  = 3;
}

/*indicate which blocks diff*/
message DiffBlocks {
    string vol_name  = 1;
    string snap_name = 2;
    /*diff blocks in the snapshot*/
    repeated uint64 diff_block_no = 3;
}

message DiffAck {
    int32 ret = 1;
    repeated DiffBlocks diff_blocks = 2;
} 

message ReadReq {
    string vol_name  = 1;
    string snap_name = 2;
    uint64 off       = 3;
    uint64 len       = 4;
}

/*indicate which block should read from block store, 
 *others read from blockdevice
 */
message ReadBlock {
    uint64 blk_no = 1;
    string blk_object = 2;
}

message ReadAck {
    int32 ret = 1;
    repeated ReadBlock read_blocks = 2;
}

/*batch or one by one*/
message CowReq {
    string vol_name = 1;
    uint64 snap_id  = 2;
    uint64 blk_no   = 3;
}

enum CowOp {
    COW_YES = 0; /*need cow */
    COW_NO  = 1; /*noneed cow, direct overlap*/
}

message CowAck {
    int32 ret = 1;
    CowOp op  = 2;
    string cow_blk_object = 3;  /*cow data write to blk object*/
}

/*after cow, then update snapshot index in dr server*/
message CowUpdateReq {
    string vol_name = 1;
    uint64 snap_id  = 2;
    uint64 blk_no   = 3;
    string cow_blk_object = 4;
}

message CowUpdateAck {
    int32 ret = 1;
}
