// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: writer.proto
// Original file comments:
// storage gateway rpc request/response
//
#ifndef GRPC_writer_2eproto__INCLUDED
#define GRPC_writer_2eproto__INCLUDED

#include "writer.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace huawei {
namespace proto {

class Writer GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // get the writeable journal files of specified volume
    virtual ::grpc::Status GetWriteableJournals(::grpc::ClientContext* context, const ::huawei::proto::GetWriteableJournalsRequest& request, ::huawei::proto::GetWriteableJournalsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::GetWriteableJournalsResponse>> AsyncGetWriteableJournals(::grpc::ClientContext* context, const ::huawei::proto::GetWriteableJournalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::GetWriteableJournalsResponse>>(AsyncGetWriteableJournalsRaw(context, request, cq));
    }
    // seal the journal when the file is full
    virtual ::grpc::Status SealJournals(::grpc::ClientContext* context, const ::huawei::proto::SealJournalsRequest& request, ::huawei::proto::SealJournalsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::SealJournalsResponse>> AsyncSealJournals(::grpc::ClientContext* context, const ::huawei::proto::SealJournalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::SealJournalsResponse>>(AsyncSealJournalsRaw(context, request, cq));
    }
    // get the writeable journals of multiple volumes
    virtual ::grpc::Status GetMultiWriteableJournals(::grpc::ClientContext* context, const ::huawei::proto::GetMultiWriteableJournalsRequest& request, ::huawei::proto::GetMultiWriteableJournalsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::GetMultiWriteableJournalsResponse>> AsyncGetMultiWriteableJournals(::grpc::ClientContext* context, const ::huawei::proto::GetMultiWriteableJournalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::GetMultiWriteableJournalsResponse>>(AsyncGetMultiWriteableJournalsRaw(context, request, cq));
    }
    // seal journals of volumes
    virtual ::grpc::Status SealMultiJournals(::grpc::ClientContext* context, const ::huawei::proto::SealMultiJournalsRequest& request, ::huawei::proto::SealMultiJournalsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::SealMultiJournalsResponse>> AsyncSealMultiJournals(::grpc::ClientContext* context, const ::huawei::proto::SealMultiJournalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::SealMultiJournalsResponse>>(AsyncSealMultiJournalsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::GetWriteableJournalsResponse>* AsyncGetWriteableJournalsRaw(::grpc::ClientContext* context, const ::huawei::proto::GetWriteableJournalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::SealJournalsResponse>* AsyncSealJournalsRaw(::grpc::ClientContext* context, const ::huawei::proto::SealJournalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::GetMultiWriteableJournalsResponse>* AsyncGetMultiWriteableJournalsRaw(::grpc::ClientContext* context, const ::huawei::proto::GetMultiWriteableJournalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::huawei::proto::SealMultiJournalsResponse>* AsyncSealMultiJournalsRaw(::grpc::ClientContext* context, const ::huawei::proto::SealMultiJournalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetWriteableJournals(::grpc::ClientContext* context, const ::huawei::proto::GetWriteableJournalsRequest& request, ::huawei::proto::GetWriteableJournalsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetWriteableJournalsResponse>> AsyncGetWriteableJournals(::grpc::ClientContext* context, const ::huawei::proto::GetWriteableJournalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetWriteableJournalsResponse>>(AsyncGetWriteableJournalsRaw(context, request, cq));
    }
    ::grpc::Status SealJournals(::grpc::ClientContext* context, const ::huawei::proto::SealJournalsRequest& request, ::huawei::proto::SealJournalsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::SealJournalsResponse>> AsyncSealJournals(::grpc::ClientContext* context, const ::huawei::proto::SealJournalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::SealJournalsResponse>>(AsyncSealJournalsRaw(context, request, cq));
    }
    ::grpc::Status GetMultiWriteableJournals(::grpc::ClientContext* context, const ::huawei::proto::GetMultiWriteableJournalsRequest& request, ::huawei::proto::GetMultiWriteableJournalsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetMultiWriteableJournalsResponse>> AsyncGetMultiWriteableJournals(::grpc::ClientContext* context, const ::huawei::proto::GetMultiWriteableJournalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetMultiWriteableJournalsResponse>>(AsyncGetMultiWriteableJournalsRaw(context, request, cq));
    }
    ::grpc::Status SealMultiJournals(::grpc::ClientContext* context, const ::huawei::proto::SealMultiJournalsRequest& request, ::huawei::proto::SealMultiJournalsResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::SealMultiJournalsResponse>> AsyncSealMultiJournals(::grpc::ClientContext* context, const ::huawei::proto::SealMultiJournalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::huawei::proto::SealMultiJournalsResponse>>(AsyncSealMultiJournalsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetWriteableJournalsResponse>* AsyncGetWriteableJournalsRaw(::grpc::ClientContext* context, const ::huawei::proto::GetWriteableJournalsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::huawei::proto::SealJournalsResponse>* AsyncSealJournalsRaw(::grpc::ClientContext* context, const ::huawei::proto::SealJournalsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::huawei::proto::GetMultiWriteableJournalsResponse>* AsyncGetMultiWriteableJournalsRaw(::grpc::ClientContext* context, const ::huawei::proto::GetMultiWriteableJournalsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::huawei::proto::SealMultiJournalsResponse>* AsyncSealMultiJournalsRaw(::grpc::ClientContext* context, const ::huawei::proto::SealMultiJournalsRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_GetWriteableJournals_;
    const ::grpc::RpcMethod rpcmethod_SealJournals_;
    const ::grpc::RpcMethod rpcmethod_GetMultiWriteableJournals_;
    const ::grpc::RpcMethod rpcmethod_SealMultiJournals_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // get the writeable journal files of specified volume
    virtual ::grpc::Status GetWriteableJournals(::grpc::ServerContext* context, const ::huawei::proto::GetWriteableJournalsRequest* request, ::huawei::proto::GetWriteableJournalsResponse* response);
    // seal the journal when the file is full
    virtual ::grpc::Status SealJournals(::grpc::ServerContext* context, const ::huawei::proto::SealJournalsRequest* request, ::huawei::proto::SealJournalsResponse* response);
    // get the writeable journals of multiple volumes
    virtual ::grpc::Status GetMultiWriteableJournals(::grpc::ServerContext* context, const ::huawei::proto::GetMultiWriteableJournalsRequest* request, ::huawei::proto::GetMultiWriteableJournalsResponse* response);
    // seal journals of volumes
    virtual ::grpc::Status SealMultiJournals(::grpc::ServerContext* context, const ::huawei::proto::SealMultiJournalsRequest* request, ::huawei::proto::SealMultiJournalsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWriteableJournals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetWriteableJournals() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetWriteableJournals() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteableJournals(::grpc::ServerContext* context, const ::huawei::proto::GetWriteableJournalsRequest* request, ::huawei::proto::GetWriteableJournalsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWriteableJournals(::grpc::ServerContext* context, ::huawei::proto::GetWriteableJournalsRequest* request, ::grpc::ServerAsyncResponseWriter< ::huawei::proto::GetWriteableJournalsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SealJournals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SealJournals() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SealJournals() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SealJournals(::grpc::ServerContext* context, const ::huawei::proto::SealJournalsRequest* request, ::huawei::proto::SealJournalsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSealJournals(::grpc::ServerContext* context, ::huawei::proto::SealJournalsRequest* request, ::grpc::ServerAsyncResponseWriter< ::huawei::proto::SealJournalsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMultiWriteableJournals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMultiWriteableJournals() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetMultiWriteableJournals() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMultiWriteableJournals(::grpc::ServerContext* context, const ::huawei::proto::GetMultiWriteableJournalsRequest* request, ::huawei::proto::GetMultiWriteableJournalsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMultiWriteableJournals(::grpc::ServerContext* context, ::huawei::proto::GetMultiWriteableJournalsRequest* request, ::grpc::ServerAsyncResponseWriter< ::huawei::proto::GetMultiWriteableJournalsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SealMultiJournals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SealMultiJournals() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SealMultiJournals() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SealMultiJournals(::grpc::ServerContext* context, const ::huawei::proto::SealMultiJournalsRequest* request, ::huawei::proto::SealMultiJournalsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSealMultiJournals(::grpc::ServerContext* context, ::huawei::proto::SealMultiJournalsRequest* request, ::grpc::ServerAsyncResponseWriter< ::huawei::proto::SealMultiJournalsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetWriteableJournals<WithAsyncMethod_SealJournals<WithAsyncMethod_GetMultiWriteableJournals<WithAsyncMethod_SealMultiJournals<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetWriteableJournals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetWriteableJournals() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetWriteableJournals() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWriteableJournals(::grpc::ServerContext* context, const ::huawei::proto::GetWriteableJournalsRequest* request, ::huawei::proto::GetWriteableJournalsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SealJournals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SealJournals() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SealJournals() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SealJournals(::grpc::ServerContext* context, const ::huawei::proto::SealJournalsRequest* request, ::huawei::proto::SealJournalsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMultiWriteableJournals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMultiWriteableJournals() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetMultiWriteableJournals() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMultiWriteableJournals(::grpc::ServerContext* context, const ::huawei::proto::GetMultiWriteableJournalsRequest* request, ::huawei::proto::GetMultiWriteableJournalsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SealMultiJournals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SealMultiJournals() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SealMultiJournals() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SealMultiJournals(::grpc::ServerContext* context, const ::huawei::proto::SealMultiJournalsRequest* request, ::huawei::proto::SealMultiJournalsResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace proto
}  // namespace huawei


#endif  // GRPC_writer_2eproto__INCLUDED
