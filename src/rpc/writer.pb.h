// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: writer.proto

#ifndef PROTOBUF_writer_2eproto__INCLUDED
#define PROTOBUF_writer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace huawei {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_writer_2eproto();
void protobuf_AssignDesc_writer_2eproto();
void protobuf_ShutdownFile_writer_2eproto();

class GetMultiWriteableJournalsRequest;
class GetMultiWriteableJournalsRequest_VolumeAndLimits;
class GetMultiWriteableJournalsResponse;
class GetWriteableJournalsRequest;
class GetWriteableJournalsResponse;
class JournalArray;
class SealJournalsRequest;
class SealJournalsResponse;
class SealMultiJournalsRequest;
class SealMultiJournalsResponse;

// ===================================================================

class GetWriteableJournalsRequest : public ::google::protobuf::Message {
 public:
  GetWriteableJournalsRequest();
  virtual ~GetWriteableJournalsRequest();

  GetWriteableJournalsRequest(const GetWriteableJournalsRequest& from);

  inline GetWriteableJournalsRequest& operator=(const GetWriteableJournalsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetWriteableJournalsRequest& default_instance();

  void Swap(GetWriteableJournalsRequest* other);

  // implements Message ----------------------------------------------

  inline GetWriteableJournalsRequest* New() const { return New(NULL); }

  GetWriteableJournalsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetWriteableJournalsRequest& from);
  void MergeFrom(const GetWriteableJournalsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetWriteableJournalsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string vol_id = 2;
  void clear_vol_id();
  static const int kVolIdFieldNumber = 2;
  const ::std::string& vol_id() const;
  void set_vol_id(const ::std::string& value);
  void set_vol_id(const char* value);
  void set_vol_id(const char* value, size_t size);
  ::std::string* mutable_vol_id();
  ::std::string* release_vol_id();
  void set_allocated_vol_id(::std::string* vol_id);

  // optional int32 limits = 3;
  void clear_limits();
  static const int kLimitsFieldNumber = 3;
  ::google::protobuf::int32 limits() const;
  void set_limits(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:huawei.proto.GetWriteableJournalsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr vol_id_;
  ::google::protobuf::int32 limits_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_writer_2eproto();
  friend void protobuf_AssignDesc_writer_2eproto();
  friend void protobuf_ShutdownFile_writer_2eproto();

  void InitAsDefaultInstance();
  static GetWriteableJournalsRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetWriteableJournalsResponse : public ::google::protobuf::Message {
 public:
  GetWriteableJournalsResponse();
  virtual ~GetWriteableJournalsResponse();

  GetWriteableJournalsResponse(const GetWriteableJournalsResponse& from);

  inline GetWriteableJournalsResponse& operator=(const GetWriteableJournalsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetWriteableJournalsResponse& default_instance();

  void Swap(GetWriteableJournalsResponse* other);

  // implements Message ----------------------------------------------

  inline GetWriteableJournalsResponse* New() const { return New(NULL); }

  GetWriteableJournalsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetWriteableJournalsResponse& from);
  void MergeFrom(const GetWriteableJournalsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetWriteableJournalsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .huawei.proto.RESULT result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::huawei::proto::RESULT result() const;
  void set_result(::huawei::proto::RESULT value);

  // repeated string journals = 2;
  int journals_size() const;
  void clear_journals();
  static const int kJournalsFieldNumber = 2;
  const ::std::string& journals(int index) const;
  ::std::string* mutable_journals(int index);
  void set_journals(int index, const ::std::string& value);
  void set_journals(int index, const char* value);
  void set_journals(int index, const char* value, size_t size);
  ::std::string* add_journals();
  void add_journals(const ::std::string& value);
  void add_journals(const char* value);
  void add_journals(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& journals() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_journals();

  // @@protoc_insertion_point(class_scope:huawei.proto.GetWriteableJournalsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> journals_;
  int result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_writer_2eproto();
  friend void protobuf_AssignDesc_writer_2eproto();
  friend void protobuf_ShutdownFile_writer_2eproto();

  void InitAsDefaultInstance();
  static GetWriteableJournalsResponse* default_instance_;
};
// -------------------------------------------------------------------

class SealJournalsRequest : public ::google::protobuf::Message {
 public:
  SealJournalsRequest();
  virtual ~SealJournalsRequest();

  SealJournalsRequest(const SealJournalsRequest& from);

  inline SealJournalsRequest& operator=(const SealJournalsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SealJournalsRequest& default_instance();

  void Swap(SealJournalsRequest* other);

  // implements Message ----------------------------------------------

  inline SealJournalsRequest* New() const { return New(NULL); }

  SealJournalsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SealJournalsRequest& from);
  void MergeFrom(const SealJournalsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SealJournalsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string vol_id = 2;
  void clear_vol_id();
  static const int kVolIdFieldNumber = 2;
  const ::std::string& vol_id() const;
  void set_vol_id(const ::std::string& value);
  void set_vol_id(const char* value);
  void set_vol_id(const char* value, size_t size);
  ::std::string* mutable_vol_id();
  ::std::string* release_vol_id();
  void set_allocated_vol_id(::std::string* vol_id);

  // repeated string journals = 3;
  int journals_size() const;
  void clear_journals();
  static const int kJournalsFieldNumber = 3;
  const ::std::string& journals(int index) const;
  ::std::string* mutable_journals(int index);
  void set_journals(int index, const ::std::string& value);
  void set_journals(int index, const char* value);
  void set_journals(int index, const char* value, size_t size);
  ::std::string* add_journals();
  void add_journals(const ::std::string& value);
  void add_journals(const char* value);
  void add_journals(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& journals() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_journals();

  // @@protoc_insertion_point(class_scope:huawei.proto.SealJournalsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr vol_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> journals_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_writer_2eproto();
  friend void protobuf_AssignDesc_writer_2eproto();
  friend void protobuf_ShutdownFile_writer_2eproto();

  void InitAsDefaultInstance();
  static SealJournalsRequest* default_instance_;
};
// -------------------------------------------------------------------

class SealJournalsResponse : public ::google::protobuf::Message {
 public:
  SealJournalsResponse();
  virtual ~SealJournalsResponse();

  SealJournalsResponse(const SealJournalsResponse& from);

  inline SealJournalsResponse& operator=(const SealJournalsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SealJournalsResponse& default_instance();

  void Swap(SealJournalsResponse* other);

  // implements Message ----------------------------------------------

  inline SealJournalsResponse* New() const { return New(NULL); }

  SealJournalsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SealJournalsResponse& from);
  void MergeFrom(const SealJournalsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SealJournalsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .huawei.proto.RESULT result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::huawei::proto::RESULT result() const;
  void set_result(::huawei::proto::RESULT value);

  // @@protoc_insertion_point(class_scope:huawei.proto.SealJournalsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_writer_2eproto();
  friend void protobuf_AssignDesc_writer_2eproto();
  friend void protobuf_ShutdownFile_writer_2eproto();

  void InitAsDefaultInstance();
  static SealJournalsResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetMultiWriteableJournalsRequest_VolumeAndLimits : public ::google::protobuf::Message {
 public:
  GetMultiWriteableJournalsRequest_VolumeAndLimits();
  virtual ~GetMultiWriteableJournalsRequest_VolumeAndLimits();

  GetMultiWriteableJournalsRequest_VolumeAndLimits(const GetMultiWriteableJournalsRequest_VolumeAndLimits& from);

  inline GetMultiWriteableJournalsRequest_VolumeAndLimits& operator=(const GetMultiWriteableJournalsRequest_VolumeAndLimits& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMultiWriteableJournalsRequest_VolumeAndLimits& default_instance();

  void Swap(GetMultiWriteableJournalsRequest_VolumeAndLimits* other);

  // implements Message ----------------------------------------------

  inline GetMultiWriteableJournalsRequest_VolumeAndLimits* New() const { return New(NULL); }

  GetMultiWriteableJournalsRequest_VolumeAndLimits* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMultiWriteableJournalsRequest_VolumeAndLimits& from);
  void MergeFrom(const GetMultiWriteableJournalsRequest_VolumeAndLimits& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMultiWriteableJournalsRequest_VolumeAndLimits* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vol_id = 1;
  void clear_vol_id();
  static const int kVolIdFieldNumber = 1;
  const ::std::string& vol_id() const;
  void set_vol_id(const ::std::string& value);
  void set_vol_id(const char* value);
  void set_vol_id(const char* value, size_t size);
  ::std::string* mutable_vol_id();
  ::std::string* release_vol_id();
  void set_allocated_vol_id(::std::string* vol_id);

  // optional int32 limits = 2;
  void clear_limits();
  static const int kLimitsFieldNumber = 2;
  ::google::protobuf::int32 limits() const;
  void set_limits(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:huawei.proto.GetMultiWriteableJournalsRequest.VolumeAndLimits)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr vol_id_;
  ::google::protobuf::int32 limits_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_writer_2eproto();
  friend void protobuf_AssignDesc_writer_2eproto();
  friend void protobuf_ShutdownFile_writer_2eproto();

  void InitAsDefaultInstance();
  static GetMultiWriteableJournalsRequest_VolumeAndLimits* default_instance_;
};
// -------------------------------------------------------------------

class GetMultiWriteableJournalsRequest : public ::google::protobuf::Message {
 public:
  GetMultiWriteableJournalsRequest();
  virtual ~GetMultiWriteableJournalsRequest();

  GetMultiWriteableJournalsRequest(const GetMultiWriteableJournalsRequest& from);

  inline GetMultiWriteableJournalsRequest& operator=(const GetMultiWriteableJournalsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMultiWriteableJournalsRequest& default_instance();

  void Swap(GetMultiWriteableJournalsRequest* other);

  // implements Message ----------------------------------------------

  inline GetMultiWriteableJournalsRequest* New() const { return New(NULL); }

  GetMultiWriteableJournalsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMultiWriteableJournalsRequest& from);
  void MergeFrom(const GetMultiWriteableJournalsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMultiWriteableJournalsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetMultiWriteableJournalsRequest_VolumeAndLimits VolumeAndLimits;

  // accessors -------------------------------------------------------

  // optional string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // repeated .huawei.proto.GetMultiWriteableJournalsRequest.VolumeAndLimits volumes = 2;
  int volumes_size() const;
  void clear_volumes();
  static const int kVolumesFieldNumber = 2;
  const ::huawei::proto::GetMultiWriteableJournalsRequest_VolumeAndLimits& volumes(int index) const;
  ::huawei::proto::GetMultiWriteableJournalsRequest_VolumeAndLimits* mutable_volumes(int index);
  ::huawei::proto::GetMultiWriteableJournalsRequest_VolumeAndLimits* add_volumes();
  ::google::protobuf::RepeatedPtrField< ::huawei::proto::GetMultiWriteableJournalsRequest_VolumeAndLimits >*
      mutable_volumes();
  const ::google::protobuf::RepeatedPtrField< ::huawei::proto::GetMultiWriteableJournalsRequest_VolumeAndLimits >&
      volumes() const;

  // @@protoc_insertion_point(class_scope:huawei.proto.GetMultiWriteableJournalsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::RepeatedPtrField< ::huawei::proto::GetMultiWriteableJournalsRequest_VolumeAndLimits > volumes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_writer_2eproto();
  friend void protobuf_AssignDesc_writer_2eproto();
  friend void protobuf_ShutdownFile_writer_2eproto();

  void InitAsDefaultInstance();
  static GetMultiWriteableJournalsRequest* default_instance_;
};
// -------------------------------------------------------------------

class JournalArray : public ::google::protobuf::Message {
 public:
  JournalArray();
  virtual ~JournalArray();

  JournalArray(const JournalArray& from);

  inline JournalArray& operator=(const JournalArray& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JournalArray& default_instance();

  void Swap(JournalArray* other);

  // implements Message ----------------------------------------------

  inline JournalArray* New() const { return New(NULL); }

  JournalArray* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JournalArray& from);
  void MergeFrom(const JournalArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JournalArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string journal = 1;
  int journal_size() const;
  void clear_journal();
  static const int kJournalFieldNumber = 1;
  const ::std::string& journal(int index) const;
  ::std::string* mutable_journal(int index);
  void set_journal(int index, const ::std::string& value);
  void set_journal(int index, const char* value);
  void set_journal(int index, const char* value, size_t size);
  ::std::string* add_journal();
  void add_journal(const ::std::string& value);
  void add_journal(const char* value);
  void add_journal(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& journal() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_journal();

  // @@protoc_insertion_point(class_scope:huawei.proto.JournalArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> journal_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_writer_2eproto();
  friend void protobuf_AssignDesc_writer_2eproto();
  friend void protobuf_ShutdownFile_writer_2eproto();

  void InitAsDefaultInstance();
  static JournalArray* default_instance_;
};
// -------------------------------------------------------------------

class GetMultiWriteableJournalsResponse : public ::google::protobuf::Message {
 public:
  GetMultiWriteableJournalsResponse();
  virtual ~GetMultiWriteableJournalsResponse();

  GetMultiWriteableJournalsResponse(const GetMultiWriteableJournalsResponse& from);

  inline GetMultiWriteableJournalsResponse& operator=(const GetMultiWriteableJournalsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMultiWriteableJournalsResponse& default_instance();

  void Swap(GetMultiWriteableJournalsResponse* other);

  // implements Message ----------------------------------------------

  inline GetMultiWriteableJournalsResponse* New() const { return New(NULL); }

  GetMultiWriteableJournalsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMultiWriteableJournalsResponse& from);
  void MergeFrom(const GetMultiWriteableJournalsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMultiWriteableJournalsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional .huawei.proto.RESULT result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::huawei::proto::RESULT result() const;
  void set_result(::huawei::proto::RESULT value);

  // map<string, .huawei.proto.JournalArray> map = 2;
  int map_size() const;
  void clear_map();
  static const int kMapFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >&
      map() const;
  ::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:huawei.proto.GetMultiWriteableJournalsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::huawei::proto::JournalArray,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      GetMultiWriteableJournalsResponse_MapEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::huawei::proto::JournalArray,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_;
  int result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_writer_2eproto();
  friend void protobuf_AssignDesc_writer_2eproto();
  friend void protobuf_ShutdownFile_writer_2eproto();

  void InitAsDefaultInstance();
  static GetMultiWriteableJournalsResponse* default_instance_;
};
// -------------------------------------------------------------------

class SealMultiJournalsRequest : public ::google::protobuf::Message {
 public:
  SealMultiJournalsRequest();
  virtual ~SealMultiJournalsRequest();

  SealMultiJournalsRequest(const SealMultiJournalsRequest& from);

  inline SealMultiJournalsRequest& operator=(const SealMultiJournalsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SealMultiJournalsRequest& default_instance();

  void Swap(SealMultiJournalsRequest* other);

  // implements Message ----------------------------------------------

  inline SealMultiJournalsRequest* New() const { return New(NULL); }

  SealMultiJournalsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SealMultiJournalsRequest& from);
  void MergeFrom(const SealMultiJournalsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SealMultiJournalsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // map<string, .huawei.proto.JournalArray> map = 2;
  int map_size() const;
  void clear_map();
  static const int kMapFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >&
      map() const;
  ::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >*
      mutable_map();

  // @@protoc_insertion_point(class_scope:huawei.proto.SealMultiJournalsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::huawei::proto::JournalArray,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      SealMultiJournalsRequest_MapEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::huawei::proto::JournalArray,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_writer_2eproto();
  friend void protobuf_AssignDesc_writer_2eproto();
  friend void protobuf_ShutdownFile_writer_2eproto();

  void InitAsDefaultInstance();
  static SealMultiJournalsRequest* default_instance_;
};
// -------------------------------------------------------------------

class SealMultiJournalsResponse : public ::google::protobuf::Message {
 public:
  SealMultiJournalsResponse();
  virtual ~SealMultiJournalsResponse();

  SealMultiJournalsResponse(const SealMultiJournalsResponse& from);

  inline SealMultiJournalsResponse& operator=(const SealMultiJournalsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SealMultiJournalsResponse& default_instance();

  void Swap(SealMultiJournalsResponse* other);

  // implements Message ----------------------------------------------

  inline SealMultiJournalsResponse* New() const { return New(NULL); }

  SealMultiJournalsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SealMultiJournalsResponse& from);
  void MergeFrom(const SealMultiJournalsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SealMultiJournalsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .huawei.proto.RESULT result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::huawei::proto::RESULT result() const;
  void set_result(::huawei::proto::RESULT value);

  // @@protoc_insertion_point(class_scope:huawei.proto.SealMultiJournalsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_writer_2eproto();
  friend void protobuf_AssignDesc_writer_2eproto();
  friend void protobuf_ShutdownFile_writer_2eproto();

  void InitAsDefaultInstance();
  static SealMultiJournalsResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GetWriteableJournalsRequest

// optional string uuid = 1;
inline void GetWriteableJournalsRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetWriteableJournalsRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetWriteableJournalsRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetWriteableJournalsRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetWriteableJournalsRequest.uuid)
}
inline void GetWriteableJournalsRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetWriteableJournalsRequest.uuid)
}
inline void GetWriteableJournalsRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetWriteableJournalsRequest.uuid)
}
inline ::std::string* GetWriteableJournalsRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetWriteableJournalsRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetWriteableJournalsRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetWriteableJournalsRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetWriteableJournalsRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetWriteableJournalsRequest.uuid)
}

// optional string vol_id = 2;
inline void GetWriteableJournalsRequest::clear_vol_id() {
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetWriteableJournalsRequest::vol_id() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetWriteableJournalsRequest.vol_id)
  return vol_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetWriteableJournalsRequest::set_vol_id(const ::std::string& value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetWriteableJournalsRequest.vol_id)
}
inline void GetWriteableJournalsRequest::set_vol_id(const char* value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetWriteableJournalsRequest.vol_id)
}
inline void GetWriteableJournalsRequest::set_vol_id(const char* value, size_t size) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetWriteableJournalsRequest.vol_id)
}
inline ::std::string* GetWriteableJournalsRequest::mutable_vol_id() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetWriteableJournalsRequest.vol_id)
  return vol_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetWriteableJournalsRequest::release_vol_id() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetWriteableJournalsRequest.vol_id)
  
  return vol_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetWriteableJournalsRequest::set_allocated_vol_id(::std::string* vol_id) {
  if (vol_id != NULL) {
    
  } else {
    
  }
  vol_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vol_id);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetWriteableJournalsRequest.vol_id)
}

// optional int32 limits = 3;
inline void GetWriteableJournalsRequest::clear_limits() {
  limits_ = 0;
}
inline ::google::protobuf::int32 GetWriteableJournalsRequest::limits() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetWriteableJournalsRequest.limits)
  return limits_;
}
inline void GetWriteableJournalsRequest::set_limits(::google::protobuf::int32 value) {
  
  limits_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetWriteableJournalsRequest.limits)
}

// -------------------------------------------------------------------

// GetWriteableJournalsResponse

// optional .huawei.proto.RESULT result = 1;
inline void GetWriteableJournalsResponse::clear_result() {
  result_ = 0;
}
inline ::huawei::proto::RESULT GetWriteableJournalsResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetWriteableJournalsResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
inline void GetWriteableJournalsResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetWriteableJournalsResponse.result)
}

// repeated string journals = 2;
inline int GetWriteableJournalsResponse::journals_size() const {
  return journals_.size();
}
inline void GetWriteableJournalsResponse::clear_journals() {
  journals_.Clear();
}
inline const ::std::string& GetWriteableJournalsResponse::journals(int index) const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetWriteableJournalsResponse.journals)
  return journals_.Get(index);
}
inline ::std::string* GetWriteableJournalsResponse::mutable_journals(int index) {
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetWriteableJournalsResponse.journals)
  return journals_.Mutable(index);
}
inline void GetWriteableJournalsResponse::set_journals(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:huawei.proto.GetWriteableJournalsResponse.journals)
  journals_.Mutable(index)->assign(value);
}
inline void GetWriteableJournalsResponse::set_journals(int index, const char* value) {
  journals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetWriteableJournalsResponse.journals)
}
inline void GetWriteableJournalsResponse::set_journals(int index, const char* value, size_t size) {
  journals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetWriteableJournalsResponse.journals)
}
inline ::std::string* GetWriteableJournalsResponse::add_journals() {
  // @@protoc_insertion_point(field_add_mutable:huawei.proto.GetWriteableJournalsResponse.journals)
  return journals_.Add();
}
inline void GetWriteableJournalsResponse::add_journals(const ::std::string& value) {
  journals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:huawei.proto.GetWriteableJournalsResponse.journals)
}
inline void GetWriteableJournalsResponse::add_journals(const char* value) {
  journals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:huawei.proto.GetWriteableJournalsResponse.journals)
}
inline void GetWriteableJournalsResponse::add_journals(const char* value, size_t size) {
  journals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:huawei.proto.GetWriteableJournalsResponse.journals)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetWriteableJournalsResponse::journals() const {
  // @@protoc_insertion_point(field_list:huawei.proto.GetWriteableJournalsResponse.journals)
  return journals_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetWriteableJournalsResponse::mutable_journals() {
  // @@protoc_insertion_point(field_mutable_list:huawei.proto.GetWriteableJournalsResponse.journals)
  return &journals_;
}

// -------------------------------------------------------------------

// SealJournalsRequest

// optional string uuid = 1;
inline void SealJournalsRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SealJournalsRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.SealJournalsRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SealJournalsRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.SealJournalsRequest.uuid)
}
inline void SealJournalsRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.SealJournalsRequest.uuid)
}
inline void SealJournalsRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.SealJournalsRequest.uuid)
}
inline ::std::string* SealJournalsRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.SealJournalsRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SealJournalsRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.SealJournalsRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SealJournalsRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.SealJournalsRequest.uuid)
}

// optional string vol_id = 2;
inline void SealJournalsRequest::clear_vol_id() {
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SealJournalsRequest::vol_id() const {
  // @@protoc_insertion_point(field_get:huawei.proto.SealJournalsRequest.vol_id)
  return vol_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SealJournalsRequest::set_vol_id(const ::std::string& value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.SealJournalsRequest.vol_id)
}
inline void SealJournalsRequest::set_vol_id(const char* value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.SealJournalsRequest.vol_id)
}
inline void SealJournalsRequest::set_vol_id(const char* value, size_t size) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.SealJournalsRequest.vol_id)
}
inline ::std::string* SealJournalsRequest::mutable_vol_id() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.SealJournalsRequest.vol_id)
  return vol_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SealJournalsRequest::release_vol_id() {
  // @@protoc_insertion_point(field_release:huawei.proto.SealJournalsRequest.vol_id)
  
  return vol_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SealJournalsRequest::set_allocated_vol_id(::std::string* vol_id) {
  if (vol_id != NULL) {
    
  } else {
    
  }
  vol_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vol_id);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.SealJournalsRequest.vol_id)
}

// repeated string journals = 3;
inline int SealJournalsRequest::journals_size() const {
  return journals_.size();
}
inline void SealJournalsRequest::clear_journals() {
  journals_.Clear();
}
inline const ::std::string& SealJournalsRequest::journals(int index) const {
  // @@protoc_insertion_point(field_get:huawei.proto.SealJournalsRequest.journals)
  return journals_.Get(index);
}
inline ::std::string* SealJournalsRequest::mutable_journals(int index) {
  // @@protoc_insertion_point(field_mutable:huawei.proto.SealJournalsRequest.journals)
  return journals_.Mutable(index);
}
inline void SealJournalsRequest::set_journals(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:huawei.proto.SealJournalsRequest.journals)
  journals_.Mutable(index)->assign(value);
}
inline void SealJournalsRequest::set_journals(int index, const char* value) {
  journals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:huawei.proto.SealJournalsRequest.journals)
}
inline void SealJournalsRequest::set_journals(int index, const char* value, size_t size) {
  journals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.SealJournalsRequest.journals)
}
inline ::std::string* SealJournalsRequest::add_journals() {
  // @@protoc_insertion_point(field_add_mutable:huawei.proto.SealJournalsRequest.journals)
  return journals_.Add();
}
inline void SealJournalsRequest::add_journals(const ::std::string& value) {
  journals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:huawei.proto.SealJournalsRequest.journals)
}
inline void SealJournalsRequest::add_journals(const char* value) {
  journals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:huawei.proto.SealJournalsRequest.journals)
}
inline void SealJournalsRequest::add_journals(const char* value, size_t size) {
  journals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:huawei.proto.SealJournalsRequest.journals)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SealJournalsRequest::journals() const {
  // @@protoc_insertion_point(field_list:huawei.proto.SealJournalsRequest.journals)
  return journals_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SealJournalsRequest::mutable_journals() {
  // @@protoc_insertion_point(field_mutable_list:huawei.proto.SealJournalsRequest.journals)
  return &journals_;
}

// -------------------------------------------------------------------

// SealJournalsResponse

// optional .huawei.proto.RESULT result = 1;
inline void SealJournalsResponse::clear_result() {
  result_ = 0;
}
inline ::huawei::proto::RESULT SealJournalsResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.SealJournalsResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
inline void SealJournalsResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.SealJournalsResponse.result)
}

// -------------------------------------------------------------------

// GetMultiWriteableJournalsRequest_VolumeAndLimits

// optional string vol_id = 1;
inline void GetMultiWriteableJournalsRequest_VolumeAndLimits::clear_vol_id() {
  vol_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMultiWriteableJournalsRequest_VolumeAndLimits::vol_id() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetMultiWriteableJournalsRequest.VolumeAndLimits.vol_id)
  return vol_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMultiWriteableJournalsRequest_VolumeAndLimits::set_vol_id(const ::std::string& value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetMultiWriteableJournalsRequest.VolumeAndLimits.vol_id)
}
inline void GetMultiWriteableJournalsRequest_VolumeAndLimits::set_vol_id(const char* value) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetMultiWriteableJournalsRequest.VolumeAndLimits.vol_id)
}
inline void GetMultiWriteableJournalsRequest_VolumeAndLimits::set_vol_id(const char* value, size_t size) {
  
  vol_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetMultiWriteableJournalsRequest.VolumeAndLimits.vol_id)
}
inline ::std::string* GetMultiWriteableJournalsRequest_VolumeAndLimits::mutable_vol_id() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetMultiWriteableJournalsRequest.VolumeAndLimits.vol_id)
  return vol_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMultiWriteableJournalsRequest_VolumeAndLimits::release_vol_id() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetMultiWriteableJournalsRequest.VolumeAndLimits.vol_id)
  
  return vol_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMultiWriteableJournalsRequest_VolumeAndLimits::set_allocated_vol_id(::std::string* vol_id) {
  if (vol_id != NULL) {
    
  } else {
    
  }
  vol_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vol_id);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetMultiWriteableJournalsRequest.VolumeAndLimits.vol_id)
}

// optional int32 limits = 2;
inline void GetMultiWriteableJournalsRequest_VolumeAndLimits::clear_limits() {
  limits_ = 0;
}
inline ::google::protobuf::int32 GetMultiWriteableJournalsRequest_VolumeAndLimits::limits() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetMultiWriteableJournalsRequest.VolumeAndLimits.limits)
  return limits_;
}
inline void GetMultiWriteableJournalsRequest_VolumeAndLimits::set_limits(::google::protobuf::int32 value) {
  
  limits_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetMultiWriteableJournalsRequest.VolumeAndLimits.limits)
}

// -------------------------------------------------------------------

// GetMultiWriteableJournalsRequest

// optional string uuid = 1;
inline void GetMultiWriteableJournalsRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMultiWriteableJournalsRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMultiWriteableJournalsRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
}
inline void GetMultiWriteableJournalsRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
}
inline void GetMultiWriteableJournalsRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
}
inline ::std::string* GetMultiWriteableJournalsRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMultiWriteableJournalsRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMultiWriteableJournalsRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.GetMultiWriteableJournalsRequest.uuid)
}

// repeated .huawei.proto.GetMultiWriteableJournalsRequest.VolumeAndLimits volumes = 2;
inline int GetMultiWriteableJournalsRequest::volumes_size() const {
  return volumes_.size();
}
inline void GetMultiWriteableJournalsRequest::clear_volumes() {
  volumes_.Clear();
}
inline const ::huawei::proto::GetMultiWriteableJournalsRequest_VolumeAndLimits& GetMultiWriteableJournalsRequest::volumes(int index) const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetMultiWriteableJournalsRequest.volumes)
  return volumes_.Get(index);
}
inline ::huawei::proto::GetMultiWriteableJournalsRequest_VolumeAndLimits* GetMultiWriteableJournalsRequest::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:huawei.proto.GetMultiWriteableJournalsRequest.volumes)
  return volumes_.Mutable(index);
}
inline ::huawei::proto::GetMultiWriteableJournalsRequest_VolumeAndLimits* GetMultiWriteableJournalsRequest::add_volumes() {
  // @@protoc_insertion_point(field_add:huawei.proto.GetMultiWriteableJournalsRequest.volumes)
  return volumes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::huawei::proto::GetMultiWriteableJournalsRequest_VolumeAndLimits >*
GetMultiWriteableJournalsRequest::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:huawei.proto.GetMultiWriteableJournalsRequest.volumes)
  return &volumes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::huawei::proto::GetMultiWriteableJournalsRequest_VolumeAndLimits >&
GetMultiWriteableJournalsRequest::volumes() const {
  // @@protoc_insertion_point(field_list:huawei.proto.GetMultiWriteableJournalsRequest.volumes)
  return volumes_;
}

// -------------------------------------------------------------------

// JournalArray

// repeated string journal = 1;
inline int JournalArray::journal_size() const {
  return journal_.size();
}
inline void JournalArray::clear_journal() {
  journal_.Clear();
}
inline const ::std::string& JournalArray::journal(int index) const {
  // @@protoc_insertion_point(field_get:huawei.proto.JournalArray.journal)
  return journal_.Get(index);
}
inline ::std::string* JournalArray::mutable_journal(int index) {
  // @@protoc_insertion_point(field_mutable:huawei.proto.JournalArray.journal)
  return journal_.Mutable(index);
}
inline void JournalArray::set_journal(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:huawei.proto.JournalArray.journal)
  journal_.Mutable(index)->assign(value);
}
inline void JournalArray::set_journal(int index, const char* value) {
  journal_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:huawei.proto.JournalArray.journal)
}
inline void JournalArray::set_journal(int index, const char* value, size_t size) {
  journal_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.JournalArray.journal)
}
inline ::std::string* JournalArray::add_journal() {
  // @@protoc_insertion_point(field_add_mutable:huawei.proto.JournalArray.journal)
  return journal_.Add();
}
inline void JournalArray::add_journal(const ::std::string& value) {
  journal_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:huawei.proto.JournalArray.journal)
}
inline void JournalArray::add_journal(const char* value) {
  journal_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:huawei.proto.JournalArray.journal)
}
inline void JournalArray::add_journal(const char* value, size_t size) {
  journal_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:huawei.proto.JournalArray.journal)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JournalArray::journal() const {
  // @@protoc_insertion_point(field_list:huawei.proto.JournalArray.journal)
  return journal_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JournalArray::mutable_journal() {
  // @@protoc_insertion_point(field_mutable_list:huawei.proto.JournalArray.journal)
  return &journal_;
}

// -------------------------------------------------------------------

// GetMultiWriteableJournalsResponse

// optional .huawei.proto.RESULT result = 1;
inline void GetMultiWriteableJournalsResponse::clear_result() {
  result_ = 0;
}
inline ::huawei::proto::RESULT GetMultiWriteableJournalsResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.GetMultiWriteableJournalsResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
inline void GetMultiWriteableJournalsResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.GetMultiWriteableJournalsResponse.result)
}

// map<string, .huawei.proto.JournalArray> map = 2;
inline int GetMultiWriteableJournalsResponse::map_size() const {
  return map_.size();
}
inline void GetMultiWriteableJournalsResponse::clear_map() {
  map_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >&
GetMultiWriteableJournalsResponse::map() const {
  // @@protoc_insertion_point(field_map:huawei.proto.GetMultiWriteableJournalsResponse.map)
  return map_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >*
GetMultiWriteableJournalsResponse::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:huawei.proto.GetMultiWriteableJournalsResponse.map)
  return map_.MutableMap();
}

// -------------------------------------------------------------------

// SealMultiJournalsRequest

// optional string uuid = 1;
inline void SealMultiJournalsRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SealMultiJournalsRequest::uuid() const {
  // @@protoc_insertion_point(field_get:huawei.proto.SealMultiJournalsRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SealMultiJournalsRequest::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:huawei.proto.SealMultiJournalsRequest.uuid)
}
inline void SealMultiJournalsRequest::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:huawei.proto.SealMultiJournalsRequest.uuid)
}
inline void SealMultiJournalsRequest::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:huawei.proto.SealMultiJournalsRequest.uuid)
}
inline ::std::string* SealMultiJournalsRequest::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:huawei.proto.SealMultiJournalsRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SealMultiJournalsRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:huawei.proto.SealMultiJournalsRequest.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SealMultiJournalsRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:huawei.proto.SealMultiJournalsRequest.uuid)
}

// map<string, .huawei.proto.JournalArray> map = 2;
inline int SealMultiJournalsRequest::map_size() const {
  return map_.size();
}
inline void SealMultiJournalsRequest::clear_map() {
  map_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >&
SealMultiJournalsRequest::map() const {
  // @@protoc_insertion_point(field_map:huawei.proto.SealMultiJournalsRequest.map)
  return map_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::huawei::proto::JournalArray >*
SealMultiJournalsRequest::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:huawei.proto.SealMultiJournalsRequest.map)
  return map_.MutableMap();
}

// -------------------------------------------------------------------

// SealMultiJournalsResponse

// optional .huawei.proto.RESULT result = 1;
inline void SealMultiJournalsResponse::clear_result() {
  result_ = 0;
}
inline ::huawei::proto::RESULT SealMultiJournalsResponse::result() const {
  // @@protoc_insertion_point(field_get:huawei.proto.SealMultiJournalsResponse.result)
  return static_cast< ::huawei::proto::RESULT >(result_);
}
inline void SealMultiJournalsResponse::set_result(::huawei::proto::RESULT value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:huawei.proto.SealMultiJournalsResponse.result)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace huawei

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_writer_2eproto__INCLUDED
